import JfkDate from './date'
import { getWeeksInMonth, getDatesInPrevMonth, getDatesInNextMonth, getDatesInMonth, parseDate, dateKeyFormat, formatDate } from './util'
const weekTitles = ['日', '一', '二', '三', '四', '五', '六']
export default {
  name: 'jfkCalendar',
  render (h) {
    let weekTitleItems
    const { showWeekTitle, showOtherMonthDates, weekTitles, dates, year, month, handleDateClick, prevMonthDisabled, nextMonthDisabled, prevMonth, nextMonth } = this
    if (showWeekTitle) {
      weekTitleItems = <div class="jfk-calendar__thead font-size--28 font-color-light-silver">
        <table class="jfk-calendar__weeks">
          <thead >
            <tr class="jfk-calendar__cell">
              {
                weekTitles.map((item, index) => {
                  return <td key={'week_' + index} class="jfk-calendar__row">{item}</td>
                })
              }
            </tr>
          </thead>
        </table>
      </div>
    }
    let dateItems = []
    let len = dates.length / 7
    for (let i = 0; i < len; i++) {
      let _dateItems = []
      for (let j = 0; j < 7; j++) {
        let key = i * 7 + j
        let o = dates[key]
        let d
        let className = ['jfk-calendar__row']
        if (showOtherMonthDates || (!showOtherMonthDates && o.current === 0)) {
          d = <jfk-date value={o.date} selected={o.selected} text={o.text} content={o.content}></jfk-date>
        }
        _dateItems.push(
          <td title={o.key} onClick={handleDateClick(key)} class={{'jfk-calendar__row': true, 'is-today': o.today, 'color-golden': o.today || o.selected || o.range !== undefined , 'is-disabled': o.disabled, 'is-selected': o.selected, 'is-range': o.range !== undefined, 'is-start': o.range === '-1', 'is-end': o.range === '1'}} key={o.key}>{d}</td>
        )
      }
      dateItems.push(<tr class="jfk-calendar__cell" key={'row_' + i}>{_dateItems}</tr>)
    }
    return (
      <div class="jfk-calendar">
        <div class="jfk-calendar__tools font-size--32 ">
          <a onClick={prevMonth} class={{'is-disabled': prevMonthDisabled, 'is-prev': true, 'switch-month': true, 'color-golden': true}}>&nbsp;</a>
          <div class="title font-color-white">{year}年{month}月</div>
          <a onClick={nextMonth} class={{'is-disabled': nextMonthDisabled, 'is-next': true, 'switch-month': true, 'color-golden': true}}>&nbsp;</a>
        </div>
        <div class="jfk-calendar__body">
          {weekTitleItems}
          <div class="jfk-calendar__tbody">
            <table class="jfk-calendar__dates">
              <tbody>
                {dateItems}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    )
  },
  data () {
    return {
      year: 0,
      month: 0,
      select: [],
      today: ''
    }
  },
  created () {
    this.year = this.defaultDate.getFullYear()
    this.month = this.defaultDate.getMonth() + 1
  },
  computed: {
    defaultDate () {
      return this.defaultValue || this.value && this.value[0] || new Date()
    },
    min () {
      if (this.minDate) {
        return formatDate(this.minDate, dateKeyFormat)
      }
      return ''
    },
    max () {
      if (this.maxDate) {
        return formatDate(this.maxDate, dateKeyFormat)
      }
      return ''
    },
    items () {
      const { year, month, firstDay, weekMode, dateCellRender, dateTextRender } = this
      let todayStr = formatDate(new Date(), dateKeyFormat)
      let weekNum = this.weekMode && 6 || getWeeksInMonth(year, month, firstDay)
      let datesInPrevMonth = getDatesInPrevMonth(year, month, firstDay)
      let datesInNextMonth = getDatesInNextMonth(year, month, firstDay, weekMode)
      let d = getDatesInMonth(year, month)
      let i = 0
      let y1 = year
      let y3 = year
      let m1 = month
      let m3 = month
      let d1 = d
      let d3 = d
      let items = []
      if (datesInPrevMonth) {
        if (m1 === 1) {
          --y1
          m1 = 13
        }
        --m1
        d1 = getDatesInMonth(y1, m1)
      }
      if (datesInNextMonth) {
        if (m3 === 12) {
          ++y3
          m3 = 0
        }
        ++m3
      }
      let c2 = 0
      let c3 = 0
      while (i < weekNum) {
        let j = 0
        while (j < 7) {
          let _y = 0
          let _m = 0
          let _d = 0
          let _c = 0
          if (datesInPrevMonth) {
            _y = y1
            _m = m1
            _d = d1 - datesInPrevMonth + 1
            _c = -1
            --datesInPrevMonth
          }
          else if (c2 < d) {
            _y = year
            _m = month
            _d = ++c2
          }
          else if (c3 < datesInNextMonth) {
            _y = y3
            _m = m3
            _d = ++c3
            _c = 1
          }
          let key = formatDate({y: _y, m: _m, d: _d}, dateKeyFormat)
          let text = ''
          let today = ''
          let content = ''
          // 节日数据源从此添加
          if (key === todayStr) {
            text = '今天'
            today = '1'
          }
          if (dateTextRender) {
            text = dateTextRender(new Date(_y, _m - 1, _d), text, _y, _m, _d)
          }
          if (dateCellRender) {
            content = dateCellRender(new Date(_y, _m - 1, _d), _y, _m, _d)
          }
          items.push({
            year: _y,
            month: _m,
            date: _d,
            current: _c,
            key,
            text,
            content,
            today
          })
          j++
        }
        i++
      }
      return items
    },
    weekTitles () {
      const { firstDay } = this
      return weekTitles.slice(firstDay, 7).concat(weekTitles.slice(0, firstDay))
    },
    prevMonthDisabled () {
      if (this.min) {
        let firstDate = formatDate({y: this.year, m: this.month, d: 1}, dateKeyFormat)
        return firstDate <= this.min ? true : false
      }
      return false
    },
    nextMonthDisabled () {
      if (this.max) {
        let lastDate = formatDate({y: this.year, m: this.month, d: getDatesInMonth(this.year, this.month)}, dateKeyFormat)
        return lastDate >= this.max ? true : false
      }
      return false
    },
    dates () {
      const { disabledDate, range: rangeS, min, max, select, items } = this
      console.log(select)
      let dates = items.map(function (item) {
        const { current, key, year, month, date } = item
        let range = ''
        let selected = ''
        let disabled = ''
        if (rangeS) {
          let rs = select[0]
          let re = select[1]
          if (rs) {
            if (rs === key) {
              range = '-1'
              selected = '1'
            } else if (re) {
              if (re === key) {
                range = '1'
                selected = '1'
              } else if (key > rs && key < re) {
                range = '0'
              }
            }
          }
        } else if (select.indexOf(key) > -1) {
          selected = '1'
        }
        if (current) {
          disabled = '1'
        } else if ((min && min > key) || (max && max < key)) {
          disabled = '2'
        }
        if (disabledDate) {
          disabled = '' + (disabledDate(new Date(year, month - 1, date), disabled, year, month, date) || '')
        }
        return Object.assign({}, item, {
          range,
          selected,
          disabled
        })
      })
      console.log(dates)
      return dates
    }
  },
  watch: {
    value (val) {
      this.select = val.map(function (d) {
        return formatDate(d, dateKeyFormat)
      })
    }
  },
  methods: {
    prevMonth () {
      if (!this.prevMonthDisabled) {
        let month = this.month - 1
        if (month < 1) {
          month = 12
          this.year = this.year - 1
        }
        this.month = month
      }
    },
    nextMonth () {
      if (!this.nextMonthDisabled) {
        let month = this.month + 1
        if (month > 12) {
          month = 1
          this.year = this.year + 1
        }
        this.month = month
      }
    },
    handleDateClick (i) {
      const { dates, range, select, format, multiple } = this
      let d = dates[i]
      const { disabled, year, month, date, selected, key } = d
      let that = this
      if (!disabled) {
        return function () {
          let pick = false
          if (range) {
            if (selected !== 1) {
              if (select.length === 2) {
                that.select = []
              } else if (select.length === 1) {
                if (key > select) {
                  that.select.push(key)
                  pick = true
                } else {
                  that.select = [key]
                }
              } else {
                that.select.push(key)
              }
            } else {
              that.select = []
            }
          } else {
            if (selected === 1) {
              if (select.length === 1) {
                that.select = []
              } else {
                let i = select.indexOf(key)
                that.select.splice(i,1)
              }
            } else if (multiple){
              that.select.push(key)
            } else {
              that.select = [key]
            }
          }
          let _format = formatDate({y: year, m: month, d: date}, format)
          that.$emit('date-click', _format, selected !== 1)
          if (multiple && that.select.length > 0) {
            pick = true
          }
          if (pick) {
            let result = that.select.sort().map(function (i) {
              let arr = i.split('/')
              return formatDate({y: +arr[0], m: +arr[1], d: +arr[2]}, format)
            })
            that.$emit('date-pick', result)
          }
        }
      } else {
        return function () {}
      }
    },
  },
  components: {
    JfkDate
  },
  props: {
    value: {
      type: Array,
      default: function () {
        return []
      }
    },
    defaultValue: Date,
    weekMode: Boolean,
    range: Boolean,
    multiple: Boolean,
    minDate: Date,
    maxDate: Date,
    minRangeGap: Date,
    maxRangeGap: Date,
    switchViewByOtherMonth: Boolean,
    firstDay: {
      type: Number,
      default: 0
    },
    showWeekTitle: {
      type: Boolean,
      default: true
    },
    showOtherMonthDates: Boolean,
    dateCellRender: Function,
    disabledDate: Function,
    dateTextRender: Function,
    format: {
      type: String,
      default: 'yyyy-MM-dd'
    }
  }
}