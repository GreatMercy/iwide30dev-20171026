/**
 * 倒计时实例，dates, hours, minutes, seconds如果未开始，是当前时间跟开始时间的值，如果已开始，是当前时间跟结束时间的值
 * @typedef {Object} killsecTimeInstance
 * @property {number} dates 天数
 * @property {number} hours 小时
 * @property {number} minutes 分钟
 * @property {number} seconds 秒数
 * @property {number} process 当前状态  0：结束 1：未开始 2:已开始
 * @property {Function} start 开始倒计时
 * @property {Function} close 结束倒计时
 */
import millsecondsToDHMS from './millsecondsToDHMS'
/**
 * Class 倒计时构造函数
 */
export default class KillsecTime {
  /**
   * 创建一个倒计时实例
   * @param  {Object} options 配置参数
   * @param  {Number} options.start 倒计时开始毫秒数
   * @param  {Number} options.end 倒计时结束毫秒数
   * @param  {Number} [options.rate=1000] 倒计时刷新频率
   * @param  {Boolean} [options.auto=true] 是否自动开始倒计时
   * @param  {killsecTimeCallback} [options.callback] 倒计时回调函数
   * @return {killsecTimeInstance}         返回实例
   */
  constructor (options = {}) {
    this.options = options
    if (this.options.auto !== false) {
      this.start()
    }
    return this
  }
  /**
   * 开始倒计时
   * @param {Boolean} [force=false] 强制开启倒时器
   * @return {killsecTimeInstance} 实例
   */
  start(force) {
    let that = this
    if (!that._hasStarted || force) {
      that._hasStarted = true
      const { callback, start, end, rate = 1000, countdown } = this.options
      force && that.close()
      this.status = 1
      if (countdown) {
        let c = countdown
        that.interval = setInterval(function () {
          that.process = 2
          let dhms = millsecondsToDHMS(c)
          that.dates = dhms.dates
          that.hours = dhms.hours
          that.minutes = dhms.minutes
          that.seconds = dhms.seconds
          if (!that._hasStartTrigger) {
            that.status && callback && callback('on-start', c, that)
            that._hasStartTrigger = true
          }
          if (c <= 0) {
            that.process = 0
            that.status && callback && callback('on-finish', c, that)
            that.close()
          }
          that.status && callback && callback('is-change', c, that)
          c -= rate
          c = Math.max(0, c)
        }, rate)
      } else {
        that.interval = setInterval(function () {
          let now = Date.now()
          let gap1 = now - start
          let gap2 = end - now
          if (gap1 < 0) {
            that.process = 1
            let dhms = millsecondsToDHMS(-gap1)
            that.dates = dhms.dates
            that.hours = dhms.hours
            that.minutes = dhms.minutes
            that.seconds = dhms.seconds
          } else if (gap2 > 0 || gap1 === 0) {
            that.process = 2
            let dhms = millsecondsToDHMS(gap2)
            that.dates = dhms.dates
            that.hours = dhms.hours
            that.minutes = dhms.minutes
            that.seconds = dhms.seconds
            if (gap1 > 0 && !that._hasStartTrigger) {
              that._hasStartTrigger = true
              that.status && callback && callback('has-start', now, that)
            } else if (gap1 === 0) {
              that.status && callback && callback('on-start', now, that)
            }
          } else {
            that.process = 0
            that.status && callback && callback(gap2 === 0 ? 'on-finish' : 'has-finish', now, that)
            that.close()
          }
          that.status && callback && callback('is-change', now, that)
        }, rate)
      }
    }
    return this
  }
  /**
   * 关闭计时器 
   * @return {Boolean} 关闭状态
   */
  close () {
    if (this.interval !== undefined) {
      clearInterval(this.interval)
      this.status = 0
      return true
    }
    return false
  }
}

/**
 * 倒计时回调函数
 * @callback killsecTimeCallback
 * @param {String} type 正在发生的事件类型 on-start: 开始 has-start: 已经开始 on-finish: 结束 has-finish: 已经结束 is-change: 倒计时正在进行
 * @param {Number} Number 当前时间的毫秒数
 * @param {killsecTimeInstance} ctx 当前倒计时实例对象,只读，不要修改属性
 */