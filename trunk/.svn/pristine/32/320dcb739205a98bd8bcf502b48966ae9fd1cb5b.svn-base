<?php
/**
 * User: daikanwu
 * Date: 2017-7-25
 * Time: 14:23
 */

use App\libraries\Iapi\FrontConst;
use App\libraries\Support\Log;
use App\services\soma\ExpressService;

defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * @SWG\Get(
 *     tags={"package"},
 *     path="/package/list",
 *     summary="home products",
 *     description="return products",
 *     operationId="get_list",
 *     produces={"application/json"},
 *     @SWG\Parameter(
 *         description="第几页",
 *         in="query",
 *         name="page",
 *         required=false,
 *         type="integer"
 *     ),
 *     @SWG\Parameter(
 *         description="每页行数",
 *         in="query",
 *         name = "page_size",
 *         required=false,
 *         type="integer"
 *     ),
 *     @SWG\Parameter(
 *         description="传1显示广告和分类 传2不显示",
 *         in="query",
 *         name = "show_ads_cat",
 *         required=false,
 *         type="integer"
 *     ),
 *     @SWG\Parameter(
 *         description="分类id",
 *         in="query",
 *         name = "fcid",
 *         required=false,
 *         type="integer"
 *     ),
 *     @SWG\Response(
 *         response="200",
 *         description="successful operation",
 *         @SWG\Schema(
 *              type="object",
 *              @SWG\Property(
 *                  property="products",
 *                  description="商品列表",
 *                  type = "array",
 *                  @SWG\Items(ref="#/definitions/SomaPackage")
 *              ),
 *              @SWG\Property(
 *                  property="ads",
 *                  description="广告 show_ads_cat=1时才显示",
 *                  type = "array",
 *                  @SWG\Items(ref="#/definitions/SomaAdv")
 *               ),
 *              @SWG\Property(
 *                  property="categories",
 *                  description="分类 show_ads_cat=1时才显示",
 *                  type = "array",
 *                  @SWG\Items(ref="#/definitions/SomaCate")
 *              ),
 *              @SWG\Property(
 *                  property="page_resource",
 *                  description="分页信息和页面链接",
 *                  type = "object",
 *                  @SWG\Property(
 *                      property="page",
 *                      description="第几页",
 *                      type = "integer",
 *                  ),
 *                  @SWG\Property(
 *                      property="size",
 *                      description="每页多少行",
 *                      type = "integer",
 *                  ),
 *                  @SWG\Property(
 *                      property="count",
 *                      description="总条数",
 *                      type = "integer",
 *                  ),
 *                  @SWG\Property(
 *                      property="link",
 *                      description="页面链接",
 *                      type = "object",
 *                      @SWG\Property(
 *                          property="detail",
 *                          description="商品详情链接",
 *                          type = "string",
 *                      ),
 *                     @SWG\Property(
 *                          property="home",
 *                          description="首页",
 *                          type = "string",
 *                      )
 *                  )
 *              )
 *         )
 *     )
 * )
 */
class Consumer extends MY_Front_Soma_Iapi  //todo 上边的文档写错了
{
    /**
     * 邮寄
     * @author daikanwu <daikanwu@jperation.com>
     */
    public function get_shipping_info()
    {
        //分两种情况，一：从订单进来的，参数是order_id。二：从赠送订单进来的，参数是gift_id
        $orderId = $this->input->get('oid');//order_id
        $giftId = $this->input->get('gid');//gift_id
        $business = $this->input->get('bsn');//business
        $interId = $this->inter_id;

        if (!$orderId && !$giftId) {
            $url = Soma_const_url::inst()->get_url('*/package/index', array('id' => $interId));
            redirect($url); //todo  怎么有redirect
        }

        if ($orderId) {

            //自己的订单
            $this->load->model('soma/Sales_order_model', 'SalesOrderModel');
            $SalesOrderModel = $this->SalesOrderModel;

            $SalesOrderModel->business = $business;
            $SalesOrderModel = $SalesOrderModel->load($orderId);
            if (!$SalesOrderModel) {
                redirect(Soma_const_url::inst()->get_url('*/package/index', array('id' => $interId)));
            }

            //检查能否邮寄
            if (!$SalesOrderModel->can_mail_order()) {
                $this->out_put_msg(FrontConst::OPER_STATUS_FAIL_TOAST, $this->lang->line('can_not_mail'));
                return;
            }
            // iwide_soma_sales_order_item_package_1001资产表
            $detail = $SalesOrderModel->get_order_asset($business, $interId); //资产订单

            //筛选属于自己的资产订单
            $detail['items'] = $SalesOrderModel->filter_items_by_openid($detail['items'], $this->openid);
            if (isset($detail['openid']) && $detail['openid'] != $this->openid) {
                //不是自己的单
                $url = Soma_const_url::inst()->get_url('*/package/index', array('id' => $interId));
                redirect($url);//todo  怎么有redirect
            }
        } elseif ($giftId) {
            //接受到赠送的礼物

            $this->load->model('soma/Gift_order_model', 'GiftOrderModel');
            $GiftOrderModel = $this->GiftOrderModel;

            $this->load->model('soma/Asset_customer_model', 'assetCustomerModel');

            $ids = array();
            $filter = array('gift_id' => $giftId);
            $items = $this->assetCustomerModel->get_gift_recevied_item($filter, $business, $interId);
            //筛选属于自己的资产订单
            $items = $this->assetCustomerModel->filter_items_by_openid($items, $this->openid);

            $model = $GiftOrderModel->load($giftId);
            //取出群发收到的列表
            $receive_list = $model->get_receiver_list_byOpenId($interId, $this->openid);
            $giftIds = $model->array_to_hash($receive_list, 'gift_id');

            if (!$giftId || !$model
                || ($model->m_get('openid_received') != $this->openid && $model->m_get('is_p2p') == Soma_base::STATUS_TRUE)
                || ($model->m_get('is_p2p') == Soma_base::STATUS_FALSE && !in_array($giftId, $giftIds))
            ) {
                redirect(Soma_const_url::inst()->get_url('*/package/index', array('id' => $interId)));
            }

            $detail = $model->m_data();
            $detail['items'] = $items;
        }

        //筛选掉数量为空的数据
        $filter_data = array();
        foreach ($detail['items'] as $k => $v) {
            if ($v['qty'] > 0) {
                $filter_data[] = $v;
            }
        }
        $detail['items'] = $filter_data;
        if (isset($detail['items'][0]['can_mail']) && $detail['items'][0]['can_mail'] == Soma_base::STATUS_FALSE) {
            if ($giftId) {
                redirect(Soma_const_url::inst()->get_url('*/gift/package_detail', array('id' => $interId, 'gid' => $giftId, 'bsn' => $business)));
            } else {
                redirect(Soma_const_url::inst()->get_url('*/order/order_detail', array('id' => $interId, 'oid' => $orderId, 'bsn' => $business)));
            }
        }

        $page_data = array();
        $items = $detail['items'];
        $count = 0;
        foreach ($items as $k => $v) {
            $count += $v['qty'];
        }

        if ($count == 0) {
            //没有可邮寄的商品
            $url = Soma_const_url::inst()->get_url('*/package/index', array('id' => $interId));
            redirect($url);
        }

        //获取消费地址
        $openid = $this->openid;

        $this->load->model('soma/Customer_address_model', 'CustomerAddressModel');
        $CustomerAddressModel = $this->CustomerAddressModel;

        $filter = array();
        $filter['openid'] = $openid;
        $filter['inter_id'] = $interId;

        $limit = 1;//取出一条地址信息
        $address = $CustomerAddressModel->get_addresses($openid, $filter, $limit);
        $address_detail = '';
        if (!empty($address)) {
            $region_list = ExpressService::getInstance()->getRegion($this->openid, $this->inter_id, $address[0]['address_id']);
            if (!empty($region_list)) {
                $address_detail = $region_list[0].$region_list[1].$region_list[2].$address[0]['address'];
            }
        }

        // 取出商品信息
        $this->load->model('soma/product_package_model', 'p_model');
        $select = 'product_id,face_img,name,shipping_fee_unit,price_package';
        $page_data['product'] = $this->p_model->get_product_package_by_ids($items[0]['product_id'], $this->inter_id, $select)[0];
        if (isset($page_data['product']['shipping_product_id'])
            && $spi = $page_data['product']['shipping_product_id']
        ) {
            $page_data['shipping_product'] = $this->p_model->get_product_package_by_ids($spi, $this->inter_id, $select)[0];
        }

        $header = array(
            'title' => $this->lang->line('mailed_goods'),
        );
//       print_r(json_encode($page_data));exit;
        $res = array(
            'product' => $page_data['product'],
            'count' => $count,
            'address' => $address_detail
        );
        if (isset($page_data['shipping_product'])) {
            $res['sum_fee'] = ceil($count/$res['product']['shipping_fee_unit'])*$page_data['shipping_product']['price_package'];
            $res['per_fee'] = $page_data['shipping_product']['price_package'];
        } else {
            $res['sum_fee'] = 0.0;
            $res['per_fee'] = 0.0;
        }
        $this->json(FrontConst::OPER_STATUS_SUCCESS, '', $res);

//        $this->_view("shipping_address_info", $page_data);
    }
}