<template>
  <div class="good-layout" :class="goodLayoutClass">
    <section class="good-lists" v-for="(good, sort) in goods">
      <header class="good-lists__head">
        <h3 class="good-lists__head-title font-size--34">
          <span class="title-text">{{good.title}}</span></h3>
        <div v-if="sort === 'killsec'" class="good-lists__head-tip">
          <killsec-time :start="good.start_time" :end="good.end_time" :start-time-node-reminder="[60000]" @on-start-time-node-reminder="killsecStartTimeNodereminderHandler" @on-finish="killsecEndHandler" @on-start="killsecStartHandler" @has-start="killsecHasStartHandler" class="tip-content font-color-light-silver"></killsec-time>
        </div>
        <div v-else-if="sort === 'groupon'" class="good-lists__head-tip">
          <p class="tip-content font-color-light-silver"><span>满</span><span class="tip-number font-size--65 jfk-font-number">{{good.price}}</span><span>减</span><span class="tip-number jfk-font-number font-size--65">{{good.discount}}</span></p>
        </div>
      </header>
      <div class="good-lists__body">
        <template v-if="layout === 'card'">
          <ul class="jfk-pl-30 jfk-pr-30">
            <good-list-card class="good-lists__item" :type="sort" v-for="(item, index) in good.items" :item="item | parseGoodId | parseGoodInfo(item)" :key="item | parseGoodId" :lgtTenMinutes="lgtTenMinutes" :startedKillsec="startedKillsec"></good-list-card>
          </ul>
        </template>
        <template v-else>
          <ul>
          <good-list-image class="good-lists__item" :type="sort" v-for="(item, index) in good.items" :item="item | parseGoodId | parseGoodInfo(item)" :key="item | parseGoodId" :lgtTenMinutes="lgtTenMinutes" :startedKillsec="startedKillsec"></good-list-image>
          </ul>
        </template>
      </div>
    </section>
  </div>
</template>
<script>
  import GoodListCard from './good_list_card'
  import GoodListImage from './good_list_image'
  import KillsecTime from './killsec_time'
  export default {
    name: 'good-list',
    created () {
      console.log(this.goods)
    },
    data () {
      return {
        lgtTenMinutes: false, // 秒杀提示十分钟时显示订阅提醒
        startedKillsec: false
      }
    },
    components: {
      GoodListCard,
      GoodListImage,
      KillsecTime
    },
    computed: {
      goodLayoutClass () {
        return 'good-layout--' + this.layout
      }
    },
    methods: {
      killsecEndHandler () {},
      killsecStartHandler () {
        this.startedKillsec = true
      },
      killsecHasStartHandler () {
        this.startedKillsec = true
      },
      killsecStartTimeNodereminderHandler (time) {
        this.lgtTenMinutes = true
      }
    },
    watch: {
      goods: function (val) {
        console.log(val)
      }
    },
    props: {
      goods: {
        type: Object,
        required: true
      },
      layout: {
        type: String,
        required: true,
        default: 'card'
      }
    },
    filters: {
      parseGoodInfo: function (goodId, good) {
        return good[goodId]
      },
      parseGoodId: function (value) {
        return Object.keys(value)[0]
      }
    }
  }
</script>
<style lang="postcss" scoped>
  .good-lists__head{
    text-align: center;
  }
  .good-lists__head-title{
    display: inline-block;
    line-height: 1;
    position: relative;
    &:before,&:after{
      content: '';
      position: absolute;
      width: 1px;
      height: 1.38em;
      top: 0;
      transform: rotate(45deg);
      transform-origin: top center;
      background-color: currentColor;
    }
    &:before{
      left: calc(-1 * px2rem(16));
    }
    &:after{
      right: calc(-1 * px2rem(42));
    }
  }
  .title-text{
    position: relative;
    letter-spacing: 0.25em;
  }
  .tip-number {
    padding: 0 px2rem(14);
    letter-spacing: 2px;
  }
</style>
