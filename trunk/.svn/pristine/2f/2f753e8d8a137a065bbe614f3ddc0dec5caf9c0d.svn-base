<?php
use App\libraries\Iapi\FrontConst;
use App\services\soma\ScopeDiscountService;
use App\libraries\Iapi\BaseConst;

defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Class Package
 *
 * @property Product_package_model $productPackageModel
 */
class Package extends MY_Front_Soma_Iapi
{
    /**
     * @SWG\Get(
     *     path="/package/info",
     *     summary="Find package by ID",
     *     description="Returns a single package",
     *     operationId="get_info",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="ID of package to return",
     *         in="query",
     *         name="pid",
     *         required=true,
     *         type="integer",
     *         format="int32"
     *     ),
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="product_id",
     *                  type="integer",
     *                  format="int32",
     *              ),
     *              @SWG\Property(
     *                  property="inter_id",
     *                  type="string",
     *              ),
     *              @SWG\Property(
     *                  property="language",
     *                  enum={1, 2}
     *              ),
     *              @SWG\Property(
     *                  property="name",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="latitude",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="longitude",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="stock",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="list",
     *                  type="array",
     *                  @SWG\Items(
     *                      type="object",
     *                      @SWG\Property(
     *                          property="id",
     *                          type="integer"
     *                      ),
     *                      @SWG\Property(
     *                          property="name",
     *                          type="string"
     *                      )
     *                  ),
     *              )
     *         )
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid pid supplied"
     *     ),
     *     @SWG\Response(
     *         response="404",
     *         description="Package not found"
     *     ),
     * )
     */
    public function get_info()
    {
        $data = [];

        $productId = $this->input->get('pid');

        if (empty($productId)) {
            show_error('Invalid pid supplied', 400);
        }

        $this->load->model('soma/product_package_model', 'productPackageModel');
        $productDetail = $this->productPackageModel->getByID($productId, $this->inter_id);

        if (empty($productDetail)) {
            show_404();
        }

        $productDetail['gallery'] = $this->productPackageModel->get_gallery_front($productId, $this->inter_id);

        $bType = $this->input->get('bType');
        if ($bType) {
            $this->session->set_userdata('b_type', $bType);
        }

        $products = array($productDetail);
        ScopeDiscountService::getInstance()->appendScopeDiscount($products, $this->current_inter_id, $this->openid, false);
        $productDetail = $products[0];
        $this->productPackageModel->appendEnInfo($productDetail);

        //todo 秒杀
        //todo 拼团

        $ticketId = $this->session->tkid ? $this->session->tkid : '';
        $isOff = $this->productPackageModel->isOff($productDetail);

        $data['product'] = $productDetail;
        $data['public'] = $this->public;

        $this->out_put_msg(FrontConst::OPER_STATUS_SUCCESS, '', $data);
    }

    //todo 获取对规格数据
    //todo 查询自身分销员信息
    /**
     * @SWG\Get(
     *     path="/package/list",
     *     description="Returns packages",
     *     operationId="get_list",
     *     produces={"application/json"},
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(
     *           type="array",
     *           @SWG\Items(
     *              type="object",
     *              @SWG\Property(
     *                  property="id",
     *                  type="integer"
     *               ),
     *               @SWG\Property(
     *                   property="name",
     *                   type="string"
     *               )
     *           ),
     *         )
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid ID supplied"
     *     ),
     *     @SWG\Response(
     *         response="404",
     *         description="Package not found"
     *     )
     * )
     */
    public function get_list()
    {
        $page_data = [];

        //首页广告图
        $this->load->model('soma/Adv_model', 'ads_model');
        $page_data['advs'] = $this->ads_model->get_ads_by_category($this->inter_id);

        //分类
        $filter_cat = $this->input->get('fcid');
        $this->load->model('soma/Category_package_model', 'categoryModel');
        $page_data['categories'] = $this->categoryModel->get_package_category_list($this->inter_id, null, 5, $filter_cat);

        //商品
        $this->load->model('soma/Product_package_model', 'productModel');
        $productModel = $this->productModel;

        $page_size = $this->input->get('page_size', null, 20);
        $page = $this->input->get('page', null, 1);

        $param = array(
            'inter_id' => $this->inter_id,
            'is_hide' => $productModel::STATUS_CAN_YES,
            'status' => $productModel::STATUS_ACTIVE,
            'page' => $page,
            'page_size' => $page_size
        );
        $products = $productModel->getProductsList($param);
        $productIds = array_column($products['data'], 'product_id');

        $result = $pointProductIds =array();
        //积分商品
        foreach ($products['data'] as $p) {
            if ($p['type'] == $productModel::PRODUCT_TYPE_POINT) $pointProductIds[] = $p['product_id'];
            $result[$p['product_id']] = $p;
        }

        //拼团列表
        $this->load->model('soma/Activity_groupon_model', 'activityGrouponModel');
        $groupons = $this->activityGrouponModel->groupon_list_by_productIds($productIds, $this->inter_id);
        foreach ($groupons as $groupon) {
            if (in_array($groupon['product_id'], $pointProductIds)) {
                $groupon['group_price'] = ceil($groupon['group_price']);
            }
            $result[$groupon['product_id']]['groupon'] = $groupon;

        }

//      秒杀列表
        $this->load->model('soma/Activity_killsec_model', 'activityKillsecModel');
        $killsecs = $this->activityKillsecModel->killsec_list_by_productIds($productIds, $this->inter_id);

        foreach ($killsecs as $killsec) {
            if (in_array($killsec['product_id'], $pointProductIds)) {
                $killsec['killsec_price'] = ceil($killsec['killsec_price']);
            }
            /** 对秒杀开始时间进行处理 */
            $killsec['killsec_time'] = date('Y-m-d H:i:s', strtotime($killsec['killsec_time']) - Activity_killsec_model::PRESTART_TIME);
            $result[$killsec['product_id']]['killsec'] = $killsec;
        }

        //满减活动
        $this->load->model('soma/Sales_rule_model', 'salesRuleModel');
        $rules = $this->salesRuleModel->get_product_rule($productIds, $this->inter_id);
        if ($rules) {
            foreach ($rules as $rule) {
                if ($rule['scope'] == Soma_base::STATUS_TRUE) {
                    //全部适用
                    // 非满减规则过滤
                    $not_auto_rule_arr = array(Sales_rule_model::RULE_TYPE_POINT, Sales_rule_model::RULE_TYPE_BALENCE);
                    if (!in_array($rule['rule_type'], $not_auto_rule_arr)) {
                        foreach ($productIds as $v) {
                            if (!isset($result[$v]['auto_rule'])) {
                                $result[$v]['auto_rule'] = $rule;
                            }
                        }
                    }
                } else {
                    foreach ($rule['product_id'] as $rule_pid) {
                        $result[$rule_pid]['auto_rule'] = $rule;
                    }
                }
            }
        }

        // 商品多规格,多规格商品显示最低的规格价格
        $this->load->model('soma/Product_specification_setting_model', 'psp_model');

        if ($productIds) {
            $psp_setting = $this->psp_model->get_inter_product_spec_setting($this->inter_id, $productIds);

            if (!empty($psp_setting)) {
                $settingList = $this->_get_setting_info($psp_setting);
                $psp_setting = $settingList['settingInfo'];
                foreach ($psp_setting as $pid => $setting) {
                    $result[$pid]['psp_setting'] = $setting;
                    $result[$pid]['price_package'] = $setting[0]['spec_price'];
                }
            }
        }

        $page_data['products'] = array_values($result);

        //给商品追加价格配置的东西
        ScopeDiscountService::getInstance()->appendScopeDiscount($page_data['products'], $this->current_inter_id, $this->openid);

        $ext['page'] = $products['page_num'];
        $ext['size'] = $products['page_size'];
        $ext['count'] = $products['total'];
        $page_data['page_resource'] = $ext;

        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $page_data);

    }

    /**
     * 处理规格信息
     * @param $psp_setting
     * @return array
     * @author luguihong  <luguihong@mofly.cn>
     */
    protected function _get_setting_info($psp_setting)
    {
        $dataTicket = $data = array();
        //判断是否有门票类的
        $isTicket = false;
        foreach ($psp_setting as $row) {
            if ($row['type'] == Soma_base::STATUS_TRUE) {
                $data[$row['product_id']][] = $row;
            } elseif ($row['type'] == Soma_base::STATUS_FALSE) {
                $isTicket = true;
                $dataTicket[$row['product_id']][] = $row;
            }
        }

        if ($isTicket && $dataTicket) {
            $psp_setting = $dataTicket;
        } else {
            $psp_setting = $data;
        }

        return array(
            'isTicket'    => $isTicket,
            'settingInfo' => $psp_setting,
        );
    }
    

}