<?php
use App\libraries\Iapi\FrontConst;
use App\services\soma\ScopeDiscountService;
use App\libraries\Iapi\BaseConst;
use App\services\soma\KillsecService;
use App\services\soma\WxService;
use App\services\soma\PackageService;
use App\services\Result;

defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Class Package
 *
 *
 * 商品相关接口
 *
 * @property Product_package_model $productPackageModel
 */
class Package extends MY_Front_Soma_Iapi
{

    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/info",
     *     summary="Find package by ID",
     *     description="Returns a single package",
     *     operationId="get_info",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="商品id",
     *         in="query",
     *         name="pid",
     *         required=false,
     *         type="integer",
     *         format="int32",
     *     ),
     *     @SWG\Parameter(
     *         description="公众号内部id",
     *         in="query",
     *         name="id",
     *         required=false,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="业务类型，默认写：package",
     *         in="query",
     *         name="bsn",
     *         required=true,
     *         type="string",
     *     ),
     *    @SWG\Parameter(
     *         description="openid",
     *         in="query",
     *         name="openid",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Response(
     *         response="200",
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="public_info",
     *                  description="公众号信息",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/IwidePublics")
     *              ),
     *              @SWG\Property(
     *                  property="user_info",
     *                  description="用户信息",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/IwideFans")
     *               ),
     *              @SWG\Property(
     *                  property="saler_info",
     *                  description="分销员信息",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/IwideHotelStaff")
     *              ),
     *              @SWG\Property(
     *                  property="rule_info",
     *                  description="商品分销规则信息",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/SomaRewardRule")
     *              ),
     *              @SWG\Property(
     *                  property="product_info",
     *                  description="商品信息",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/SomaPackage")
     *              ),
     *         )
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid pid supplied"
     *     ),
     *     @SWG\Response(
     *         response="404",
     *         description="Package not found"
     *     ),
     * )
     */
    public function get_info()
    {
        $data = [];

        $productId = $this->input->get('pid');
        if (empty($productId)) {
            show_error('Invalid pid supplied', 400);
        }

        $this->load->model('soma/product_package_model', 'productPackageModel');
        $productModel = $this->productPackageModel;
        $productDetail = $this->productPackageModel->getByID($productId, $this->inter_id);
        if (empty($productDetail)) {
            show_404();
        }

        $productDetail['is_off'] = $this->productPackageModel->isOff($productDetail);

        //$this->handleDistribute();

        //相册
        $productDetail['gallery'] = $this->productPackageModel->get_gallery_front($productId, $this->inter_id);

        //给商品追加用户对应的专属价格
        $products = array($productDetail);
        ScopeDiscountService::getInstance()->appendScopeDiscount($products, $this->current_inter_id, $this->openid, false);
        //追加商品的英文信息
        $productDetail = $products[0];
        $this->productPackageModel->appendEnInfo($productDetail);

        //公众号信息
        $data['public_info'] = $this->public;

        //todo 产品信息双语化


        //商品是否已过期
        $is_expire = false;
        if ($productDetail['goods_type'] != $productModel::SPEC_TYPE_TICKET && $productDetail['date_type'] == $productModel::DATE_TYPE_STATIC) {
            $expireTime = isset($productDetail['expiration_date']) ? strtotime($productDetail['expiration_date']) : null;
            if ($expireTime && $expireTime < time()) {
            }
        }
        $productDetail['is_expire'] = $is_expire;


        //秒杀
        $killsec = [];
        if (!$is_expire) {
            $killsec = KillsecService::getInstance()->getInfo($productId);
            if ($killsec) {
                //秒杀倒计时
                $killsec['killsec_countdown'] = strtotime($killsec['killsec_time']) * 1000;
                //刷新频率
                $killsec['stock_reflesh_rate'] = 10000;
                if (ENVIRONMENT === 'production') {
                    $killsec['stock_reflesh_rate'] = 60000;
                }
            }
        }

        //拼团
        $this->load->model('soma/Activity_groupon_model', 'activityGrouponModel');
        $groupons = $this->activityGrouponModel->groupon_list($productId);
        if (count($groupons)) {
            $groupons[0] = array_pop($groupons);
        }


        //如果是积分商品，去掉小数点，向上取整
        if ($productDetail['type'] == $productModel::PRODUCT_TYPE_POINT) {
            $productDetail['price_package'] = ceil($productDetail['price_package']);
            $productDetail['price_market'] = ceil($productDetail['price_market']);
            if ($killsec) {
                $killsec['killsec_price'] = ceil($killsec['killsec_price']);
            }
            if ($groupons) {
                $groupons[0]['group_price'] = ceil($groupons[0]['group_price']);
            }
        }


        //积分商品设置规则为空
        $auto_rule = [];
        if ($productDetail['type'] != Product_package_model::PRODUCT_TYPE_POINT && empty($productDetail['scopes'])) {
            //促销规则加载
            $this->load->model('soma/Sales_rule_model');
            $auto_rule = $this->Sales_rule_model->get_product_rule(array($productId), $this->inter_id, 'auto_rule');
            $auto_rule_new = array();
            if ($auto_rule && count($auto_rule) > 0) {
                foreach ($auto_rule as $v) {
                    $auto_rule_new[] = $v;
                }
            }
            $auto_rule = $auto_rule_new;
            //todo 活动规则双语
        }

        $productDetail['auto_rule'] = $auto_rule;
        $productDetail['groupons'] = $groupons;
        $productDetail['killsec'] = $killsec;

        //加载多规格信息,页面显示价格为最低规格价
        $isTicket = false;
        $specProduct = false;
        $pspSummary = null;
        $pspSetting = null;
        if ($productDetail) {
            $this->load->model('soma/Product_specification_model', 'ps_info_model');
            $this->load->model('soma/Product_specification_setting_model', 'ps_detail_model');
            $ps_info = $this->ps_info_model->get_spec_list($this->inter_id, $productId);
            $ps_detail = $this->ps_detail_model->get_inter_product_spec_setting($this->inter_id, array($productId));
            if (!empty($ps_detail) && !empty($ps_info)) {
                $settingList = $this->_get_setting_info($ps_detail);
                $ps_detail = $settingList['settingInfo'];
                $isTicket = $settingList['isTicket'];
                //可能存在门票的时间规格，不存在多规格，且链接地址不带参数tkid
                if ($ps_detail) {
                    $productDetail['price_package'] = $ps_detail[$productId][0]['spec_price'];
                    if ($isTicket) {
                        $pspSummary = $ps_info[$productModel::SPEC_TYPE_TICKET];
                    } else {
                        $pspSummary = $ps_info[$productModel::SPEC_TYPE_SCOPE];
                    }
                    $pspSetting = $ps_detail;
                    $specProduct = true;
                }
            }
            //todo 规格信息双语翻译
        }
        $productDetail['spec_product'] = $specProduct;
        $productDetail['psp_setting'] = $pspSetting;
        $productDetail['psp_summary'] = $pspSummary;


        $productDetail['isTicket'] = $isTicket;
        $productDetail['ticketId'] = $this->session->userdata('tkid') ? $this->session->userdata('tkid') : null;

        //查询自身分销员信息
        $data['saler_info'] = PackageService::getInstance()->getUserSalerOrFansaler($this->inter_id, $this->openid);
        //查询适用分销规则信息
        $data['rule_info'] = array();
        $this->load->model('soma/Reward_rule_model', 'rewardRuleModel');
        $rules = $this->rewardRuleModel->getRewardRules($this->inter_id);
        if (!empty($rules) && !empty($data['saler_info'])) {
            $effective_rule = false;
            //同等优先级下，选择秒杀规则优先
            foreach ($rules as $rule) {
                //粉丝不显示 拼团不显示 规则设置不显示的不显示
                if ($rule['reward_source'] == Reward_rule_model::REWARD_SOURCE_FIXED || $rule['rule_type'] == Reward_rule_model::SETTLE_GROUPON || $rule['can_show_hip'] == Reward_rule_model::STATUS_CAN_NO) {
                    continue;
                }

                //检查产品是否符合分销规则，不符合不显示
                if (!empty($rule['product_ids']) && strpos($rule['product_ids'], $productId . '') === false) {
                    continue;
                }

                //身份为泛分销员，规则不为泛分销规则不显示
                if ($data['saler_info']['saler_type'] == 'FANS' && $rule['reward_source'] != Reward_rule_model::REWARD_SOURCE_FANS_SALER) {
                    continue;
                }

                //身份为分销员，规则不为分销规则不显示
                $saler_rule_source = array(Reward_rule_model::REWARD_SOURCE_FIXED, Reward_rule_model::REWARD_SOURCE_SALER);
                if ($data['saler_info']['saler_type'] == 'STAFF' && !in_array($rule['reward_source'], $saler_rule_source)) {
                    continue;
                }

                // 不存在秒杀时不显示秒杀规则
                if (!$killsec && $rule['rule_type'] == Reward_rule_model::SETTLE_KILLSEC) {
                    continue;
                }

                //第一条规则
                if ($effective_rule == false) {
                    $effective_rule = $rule;
                }

                //秒杀优先
                if ($killsec && $rule['sort'] == $effective_rule['sort'] && $rule['rule_type'] == Reward_rule_model::SETTLE_KILLSEC) {
                    $effective_rule = $rule;
                    break;
                }
            }
            if ($effective_rule) {
                if ($effective_rule['reward_type'] == Reward_rule_model::REWARD_TYPE_FIXED) {
                    //固定金额保留两位小数
                    $effective_rule['reward_rate'] = round($effective_rule['reward_rate'], 2);
                } else {
                    //界面显示为百分比
                    $effective_rule['reward_rate'] = $effective_rule['reward_rate'] * 100;
                }
                $data['rule_info'] = $effective_rule;
            }
        }

        //用户信息
        $data['user_info'] = $this->user;

        $data['product_info'] = $productDetail;

        $this->out_put_msg(FrontConst::OPER_STATUS_SUCCESS, '', $data);
    }

    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/list",
     *     summary="home products",
     *     description="return products",
     *     operationId="get_list",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="第几页",
     *         in="query",
     *         name="page",
     *         required=false,
     *         type="integer"
     *     ),
     *     @SWG\Parameter(
     *         description="每页行数",
     *         in="query",
     *         name = "page_size",
     *         required=false,
     *         type="integer"
     *     ),
     *     @SWG\Parameter(
     *         description="传1显示广告和分类 传2不显示",
     *         in="query",
     *         name = "show_ads_cat",
     *         required=false,
     *         type="integer"
     *     ),
     *     @SWG\Parameter(
     *         description="分类id",
     *         in="query",
     *         name = "fcid",
     *         required=false,
     *         type="integer"
     *     ),
     *     @SWG\Response(
     *         response="200",
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="products",
     *                  description="商品列表",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/SomaPackage")
     *              ),
     *              @SWG\Property(
     *                  property="ads",
     *                  description="广告 show_ads_cat=1时才显示",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/SomaAdv")
     *               ),
     *              @SWG\Property(
     *                  property="categories",
     *                  description="分类 show_ads_cat=1时才显示",
     *                  type = "array",
     *                  @SWG\Items(ref="#/definitions/SomaCate")
     *              ),
     *              @SWG\Property(
     *                  property="page_resource",
     *                  description="分页信息和页面链接",
     *                  type = "object",
     *                  @SWG\Property(
     *                      property="page",
     *                      description="第几页",
     *                      type = "integer",
     *                  ),
     *                  @SWG\Property(
     *                      property="size",
     *                      description="每页多少行",
     *                      type = "integer",
     *                  ),
     *                  @SWG\Property(
     *                      property="count",
     *                      description="总条数",
     *                      type = "integer",
     *                  ),
     *                  @SWG\Property(
     *                      property="link",
     *                      description="页面链接",
     *                      type = "object",
     *                      @SWG\Property(
     *                          property="detail",
     *                          description="商品详情链接",
     *                          type = "string",
     *                      ),
     *                     @SWG\Property(
     *                          property="home",
     *                          description="首页",
     *                          type = "string",
     *                      ),
     *                     @SWG\Property(
     *                          property="order",
     *                          description="订单",
     *                          type = "string",
     *                      ),
     *                     @SWG\Property(
     *                          property="center",
     *                          description="我的",
     *                          type = "integer",
     *                      )
     *                  )
     *              )
     *         )
     *     )
     * )
     */
    public function get_list()
    {
        $page_data = [];

        $filter_cat = $this->input->get('fcid');
        $show_ads_cat = $this->input->get('show_ads_cat');
        $page_size = $this->input->get('page_size', null, 20);
        $page = $this->input->get('page', null, 1);

        if ($show_ads_cat == MY_Model_Soma::STATUS_TRUE) {
            //首页广告图
            $this->load->model('soma/Adv_model', 'ads_model');
            $page_data['advs'] = $this->ads_model->get_ads_by_category($this->inter_id);

            //分类
            $this->load->model('soma/Category_package_model', 'categoryModel');
            $page_data['categories'] = $this->categoryModel->get_package_category_list($this->inter_id, null, 5, $filter_cat);
        }

        //商品
        $this->load->model('soma/Product_package_model', 'productPackageModel');
        $productModel = $this->productPackageModel;

        $field = array('and inter_id =', 'and is_hide =', 'and status = ');
        $field_value = array($this->inter_id, $productModel::STATUS_CAN_YES, $productModel::STATUS_ACTIVE);
        if (!empty($filter_cat)) {
            array_push($field, 'and cat_id =');
            array_push($field_value, $filter_cat);
        }
        $return_fields = ['product_id', 'inter_id', 'cat_id', 'goods_type', 'face_img', 'name', 'price_market', 'price_package', 'stock', 'is_hide', 'validity_date', 'sort', 'status', 'type', 'date_type', 'expiration_date', 'sales_cnt'];
        $options = array('limit' => $page_size, 'offset' => ($page - 1) * $page_size, 'orderBy' => 'sort DESC', 'page' => $page);
        $products = $productModel->paginate($field, $field_value, $return_fields, $options);

        $productIds = array_column($products['data'], 'product_id');
        $result = $pointProductIds = array();

        //拿到积分商品的id
        foreach ($products['data'] as $k => $p) {
            //做过期处理过滤
            if ($p['goods_type'] != $productModel::SPEC_TYPE_TICKET && $p['date_type'] == $productModel::DATE_TYPE_STATIC) {
                //固定有效期
                $expireTime = isset($p['expiration_date']) ? strtotime($p['expiration_date']) : null;
                if ($expireTime && $expireTime < time()) {
                    //如果已经过了有效期，停止本次循环，并在此列表删除该商品
                    unset($products[$k]);
                    continue;
                }
            }

            if ($p['type'] == $productModel::PRODUCT_TYPE_POINT) {
                $pointProductIds[] = $p['product_id'];
            }
            $result[$p['product_id']] = $p;

            //商品默认参加活动是非秒杀
            $result[$p['product_id']]['product_type'] = $productModel::PRODUCT_ACTIVITY_DEFAULT;

            //默认标签为零
            $result[$p['product_id']]['tag'] = 0;
            if ($p['goods_type'] == $productModel::SPEC_TYPE_COMBINE) {
                //组合标签
                $result[$p['product_id']]['tag'] = $productModel::PRODUCT_TAG_COMBINED;
            } else {
                if ($p['type'] == $productModel::PRODUCT_TYPE_BALANCE) {
                    //储值标签
                    $result[$p['product_id']]['tag'] = $productModel::PRODUCT_TAG_BALANCE;
                }
                if ($p['type'] == $productModel::PRODUCT_TYPE_POINT) {
                    //积分标签
                    $result[$p['product_id']]['tag'] = $productModel::PRODUCT_TAG_POINT;
                }
            }
        }

        //满减活动
        $this->load->model('soma/Sales_rule_model', 'salesRuleModel');
        $rules = $this->salesRuleModel->get_product_rule($productIds, $this->inter_id);
        if ($rules) {
            foreach ($rules as $rule) {
                if ($rule['scope'] == Soma_base::STATUS_TRUE) {
                    //全部适用
                    // 非满减规则过滤
                    $not_auto_rule_arr = array(Sales_rule_model::RULE_TYPE_POINT, Sales_rule_model::RULE_TYPE_BALENCE);
                    if (!in_array($rule['rule_type'], $not_auto_rule_arr)) {
                        foreach ($productIds as $v) {
                            if (!isset($result[$v]['auto_rule'])) {
                                $result[$v]['auto_rule'] = $rule;
                                $result[$v]['tag'] = $productModel::PRODUCT_TAG_REDUCED;
                            }
                        }
                    }
                } else {
                    foreach ($rule['product_id'] as $rule_pid) {
                        $result[$rule_pid]['auto_rule'] = $rule;
                        $result[$rule_pid]['tag'] = $productModel::PRODUCT_TAG_REDUCED;
                    }
                }
            }
        }

        //秒杀列表
        $this->load->model('soma/Activity_killsec_model', 'activityKillsecModel');
        $killsecs = $this->activityKillsecModel->killsec_list_by_productIds($productIds, $this->inter_id);

        foreach ($killsecs as $killsec) {
            if (in_array($killsec['product_id'], $pointProductIds)) {
                $killsec['killsec_price'] = ceil($killsec['killsec_price']);
            }
            /** 对秒杀开始时间进行处理 */
//            $killsec['killsec_time'] = date('Y-m-d H:i:s', strtotime($killsec['killsec_time']) - Activity_killsec_model::PRESTART_TIME);
            $result[$killsec['product_id']]['killsec'] = $killsec;
            $result[$killsec['product_id']]['product_type'] = $productModel::PRODUCT_ACTIVITY_KILLSEC;
            $result[$killsec['product_id']]['tag'] = $productModel::PRODUCT_TAG_KILLSEC;
        }

        // 商品多规格,多规格商品显示最低的规格价格
        $this->load->model('soma/Product_specification_setting_model', 'psp_model');

        if ($productIds) {
            $psp_setting = $this->psp_model->get_inter_product_spec_setting($this->inter_id, $productIds);

            if (!empty($psp_setting)) {
                $settingList = $this->_get_setting_info($psp_setting);
                $psp_setting = $settingList['settingInfo'];
                foreach ($psp_setting as $pid => $setting) {
//                    $result[$pid]['psp_setting'] = $setting;
                    $result[$pid]['price_package'] = $setting[0]['spec_price'];
                }
            }
        }

        $page_data['products'] = array_values($result);
        //取出秒杀id
        $act_id = array();
        foreach ($page_data['products'] as $p) {
            if ($p['product_type'] == $productModel::PRODUCT_ACTIVITY_KILLSEC) {
                $act_id[] = $p['killsec']['act_id'];
            }
        }

        //获取用户订阅的act_id
        $actids = array();
        if (!empty($act_id)) {
            $openid_actid = KillsecService::getInstance()->getOpenidSubscribActid($act_id, $this->inter_id, $this->openid);
        }
        if (!empty($openid_actid)) {
            $actids = array_column($openid_actid, 'act_id');
        }

        //给商品追加价格配置的东西
        ScopeDiscountService::getInstance()->appendScopeDiscount($page_data['products'], $this->current_inter_id, $this->openid);

        foreach ($page_data['products'] as &$val) {
            //专属价格
            if (isset($val['scopes'])) {
                $val['tag'] = $productModel::PRODUCT_TAG_EXCLUSIVE;
            }
            //去掉名称的标签
            $val['name'] = strip_tags($val['name']);

            if ($val['product_type'] == $productModel::PRODUCT_ACTIVITY_KILLSEC) {
                //秒杀时间设成秒数
                $val['killsec']['killsec_time'] = strtotime($val['killsec']['killsec_time']);
                $val['killsec']['end_time'] = strtotime($val['killsec']['end_time']);

                //更改订阅状态 1表示已设置提醒 2表示未设置提醒
                $val['killsec']['subscribe_status'] = 2;
                if (!empty($actids)) {
                    if (in_array($val['killsec']['act_id'], $actids)) {
                        $val['killsec']['subscribe_status'] = 1;
                    }
                }
            }
        }
        unset($val);

        //分页数据
        $ext['page'] = $products['page_num'];
        $ext['size'] = $products['page_size'];
        $ext['count'] = count($page_data['products']);

        //相关链接
        $request_param = $this->input->get();
        unset($request_param['page'], $request_param['page_size'], $request_param['openid'], $request_param['id']);
        $ext['link']['detail'] = Soma_const_url::inst()->get_package_detail() . '&' . http_build_query($request_param) . '&pid=';
        $ext['link']['home'] = Soma_const_url::inst()->get_pacakge_home_page();
        $ext['link']['order'] = Soma_const_url::inst()->get_soma_ucenter();
        $ext['link']['center'] = base_url("index.php/membervip/center")."?id=".$this->inter_id;
        $page_data['page_resource'] = $ext;

        $this->out_put_msg(FrontConst::OPER_STATUS_SUCCESS, '', $page_data);
    }

    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/settings",
     *     summary="Find settings by ID",
     *     description="Returns production specific setting ",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="ID of package to return",
     *         in="query",
     *         name="pid",
     *         required=true,
     *         type="integer",
     *         format="int32"
     *     ),
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="setting_id",
     *                  type="integer",
     *                  format="int32",
     *              ),
     *              @SWG\Property(
     *                  property="product_id",
     *                  type="integer",
     *                  format="int32",
     *              ),
     *              @SWG\Property(
     *                  property="inter_id",
     *                  type="string",
     *              ),
     *              @SWG\Property(
     *                  property="hotel_id",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="outter_sku",
     *                  type="string" ,
     *                  description="商品SKU"
     *              ),
     *              @SWG\Property(
     *                  property="setting_spec_compose",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="spec_face_img",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="spec_price",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="spec_stock",
     *                  type="string"
     *              ),
     *              @SWG\Property(
     *                  property="type",
     *                  type="integer",
     *                  description="商品类型：1.套票类，2.特权券"
     *              ),
     *              @SWG\Property(
     *                  property="goods_type",
     *                  type="integer",
     *                  description="商品类型。1:通用；2:门票"
     *              )
     *         )
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid pid supplied"
     *     )
     * )
     */
    public function get_settings()
    {
        $productId = $this->input->get('pid');

        if (empty($productId)) {
            show_error('Invalid pid supplied', 400);
        }

        $this->load->model('soma/Product_specification_setting_model', 'psp_model');
        $psp_setting = $this->psp_model->get_inter_product_spec_setting($this->inter_id, array($productId));

        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $psp_setting);
    }

    /**
     * 处理规格信息
     * @param $psp_setting
     * @return array
     * @author luguihong  <luguihong@mofly.cn>
     */
    protected function _get_setting_info($psp_setting)
    {
        $dataTicket = $data = array();
        //判断是否有门票类的
        $isTicket = false;
        foreach ($psp_setting as $row) {
            if ($row['type'] == Soma_base::STATUS_TRUE) {
                $data[$row['product_id']][] = $row;
            } elseif ($row['type'] == Soma_base::STATUS_FALSE) {
                $isTicket = true;
                $dataTicket[$row['product_id']][] = $row;
            }
        }

        if ($isTicket && $dataTicket) {
            $psp_setting = $dataTicket;
        } else {
            $psp_setting = $data;
        }

        return array('isTicket' => $isTicket, 'settingInfo' => $psp_setting,);
    }

    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/spec",
     *     summary="获取商品规格",
     *     description="获取商品规格信息，包括款式、价格、库存等",
     *     operationId="get_spec",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="公众号id",
     *         in="query",
     *         name="id",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="商品id",
     *         in="query",
     *         name="pid",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="用户openid",
     *         in="query",
     *         name="openid",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Response(
     *         response="200",
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="data",
     *                  type="array",
     *                  description="返回数据" ,
     *                  @SWG\Items(
     *                        type="object",
     *                        @SWG\Property(
     *                            property="spec_type",
     *                            type="array" ,
     *                            description="款式标题" ,
     *                        ),
     *                        @SWG\Property(
     *                            property="spec_name",
     *                            type="array" ,
     *                            description="款式选项" ,
     *                        ),
     *                        @SWG\Property(
     *                            property="spec_name_id",
     *                            type="array" ,
     *                            description="该项作为款式选项的隐藏值" ,
     *                        ),
     *                        @SWG\Property(
     *                            property="spec_id",
     *                            type="array" ,
     *                            description="所选款式的组合隐藏值" ,
     *                        ),
     *                        @SWG\Property(
     *                            property="setting_id",
     *                            type="array" ,
     *                            description="款式id，该项作为用户选完款式后的key，作为同级的data的key,可以知道所选款式的单价、库存" ,
     *                        ),
     *                        @SWG\Property(
     *                            property="data",
     *                            type="array" ,
     *                            description="商品所有可能组合的款式列表，里面有组合商品所有数值" ,
     *                        ),
     *                  ),
     *              ),
     *         )
     *     )
     * )
     */
    public function get_spec()
    {

        $this->load->model('soma/Product_specification_setting_model', 'psp_model');
        $data = $this->psp_model->get_full_specification_compose($this->inter_id, $this->input->get('pid', true), Soma_base::STATUS_TRUE);
        //todo 规格信息双语化
        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $data);
    }


    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/killsec_stock",
     *     summary="获取秒杀商品库存",
     *     description="获取秒杀商品库存",
     *     operationId="get_killsec_stock",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="公众号id",
     *         in="query",
     *         name="id",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="秒杀活动id",
     *         in="query",
     *         name="act_id",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="用户openid",
     *         in="query",
     *         name="openid",
     *         required=false,
     *         type="string",
     *     ),
     *     @SWG\Response(
     *         response="200",
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="data",
     *                  type="array",
     *                  description="返回数据" ,
     *                  @SWG\Items(ref="#definitions/SomaKillsec"),
     *              ),
     *         )
     *     )
     * )
     */
    public function get_killsec_stock()
    {
        $data = KillsecService::getInstance()->getStock($this->input->get('act_id'));
        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $data);
    }


    //todo 文档未整理
    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/pay",
     *     summary="订单提交页",
     *     description="用户在商品详情页选择好商品，跳至支付页面",
     *     operationId="get_pay",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="公众号id",
     *         in="query",
     *         name="id",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="商品id",
     *         in="query",
     *         name="pid",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="购买商品类型",
     *         in="query",
     *         name="btype",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="购买商品规格",
     *         in="query",
     *         name="psp_sid",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="用户openid",
     *         in="query",
     *         name="openid",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Response(
     *         response="200",
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="activity",
     *                  type="object",
     *                  description="立减活动" ,
     *                  @SWG\Items(
     *                        type="object",
     *                        @SWG\Property(
     *                            property="status",
     *                            type="integer" ,
     *                            enum={1, 2},
     *                            description="是否为立减活动（1：是，2：否）" ,
     *                        ),
     *                        @SWG\Property(
     *                            property="auto_rule",
     *                            type="array" ,
     *                            description="立减活动规则" ,
     *                            @SWG\Items(
     *                                 @SWG\Property(
     *                                    property="rule_type",
     *                                    type="integer" ,
     *                                    description="类型" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="name",
     *                                    type="string" ,
     *                                    description="名称" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="reduce_cost",
     *                                    type="float" ,
     *                                    description="抵扣金额" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="least_cost",
     *                                    type="float" ,
     *                                    description="使用下限" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="can_use_coupon",
     *                                    type="integer" ,
     *                                    enum={1, 2},
     *                                    description="限制使用优惠券（1：可用 2：不可用）" ,
     *                                 ),
     *                            )
     *                        )
     *                      ),
     *                  ),
     *                  @SWG\Property(
     *                      property="asset",
     *                      type="object",
     *                      description="积分储值" ,
     *                      @SWG\Items(
     *                          type="object",
     *                          @SWG\Property(
     *                              property="status",
     *                              type="integer" ,
     *                              enum={1, 2},
     *                              description="积分储值（1：是，2：否）" ,
     *                          ),
     *                          @SWG\Property(
     *                              property="cal_rule",
     *                              type="array" ,
     *                              description="积分储值规则" ,
     *                              @SWG\Items(
     *                                 @SWG\Property(
     *                                    property="rule_type",
     *                                    type="integer" ,
     *                                    description="类型" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="quote",
     *                                    type="string" ,
     *                                    description="使用额度" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="reduce_cost",
     *                                    type="float" ,
     *                                    description="抵扣金额" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="can_use_coupon",
     *                                    type="float" ,
     *                                    description="使用下限" ,
     *                                 ),
     *                            )
     *                        )
     *                      ),
     *                  ),
     *              ),
     *     )
     * )
     */
    public function get_pay()
    {

        //$this->handleDistribute();

        $data = [];

        //todo: 皮肤

        $productId = intval($this->input->get('pid'));
        if (empty($productId)) {
            show_404();
        }

        $this->load->model('soma/Product_package_model', 'productPackageModel');
        $productDetail = $this->productPackageModel->get_product_package_detail_by_product_id($productId, $this->inter_id);

        //商品不存在
        if (!$productDetail) {
            show_404();
        }

        //todo:产品信息双语化

        //$header = array('title' => $this->lang->line('purchase_payment'));

        //做过期处理过滤
        $productModel = $this->productPackageModel;

        $productDetail['type'] = isset($productDetail['type']) ? $productDetail['type'] : null;
        if ($productDetail['type'] == $productModel::PRODUCT_TYPE_BALANCE || $productDetail['type'] == $productModel::PRODUCT_TYPE_POINT) {
            //todo: 跳至会员登录页

        }

        $is_expire = false;
        if ($productDetail['goods_type'] != $productModel::SPEC_TYPE_TICKET && $productDetail['date_type'] == $productModel::DATE_TYPE_STATIC) {
            $time = time();
            $expireTime = isset($productDetail['expiration_date']) ? strtotime($productDetail['expiration_date']) : null;
            if ($expireTime && $expireTime < $time) {
                $is_expire = true;
            }
        }
        $productDetail['is_expire'] = $is_expire;

        //如果是积分商品，去掉小数点，向上取整
        if ($productDetail['type'] == $productModel::PRODUCT_TYPE_POINT) {
            $productDetail['price_package'] = ceil($productDetail['price_package']);
            $productDetail['price_market'] = ceil($productDetail['price_market']);
        }

        //todo: 分享按钮、分享内容

        //取出联系人和电话
        $data['customer_info'] = $this->productPackageModel->get_customer_contact(['openid' => $this->openid]);

        //读取购买人的可用券
        $this->load->library('Soma/Api_member');
        $api = new Api_member($this->inter_id);

        //可用优惠券数量
        $result = $api->get_token();
        $result['data'] = isset($result['data']) ? $result['data'] : array();
        $api->set_token($result['data']);
        $result = $api->conpon_sign_list($this->openid);
        $result['data'] = isset($result['data']) ? $result['data'] : array();
        $data['coupons'] = count($result['data']);

        //储值类型商品读取购买人的储值信息
        $data['balance'] = null;
        $data['balance']['balance_url'] = null;
        if ($productDetail['type'] && isset($productDetail['c']) && $productDetail['c'] == Product_package_model::PRODUCT_TYPE_BALANCE) {
            $result = $api->get_token();
            $result['data'] = isset($result['data']) ? $result['data'] : array();
            $api->set_token($result['data']);
            $balance = $api->balence_info($this->openid);
            $balance['data'] = isset($balance['data']) ? $balance['data'] : 0;
            $data['balance'] = $balance['data'];
            $data['balance']['balance_url'] = $api->balence_deposit_url($this->inter_id);
        }

        //积分商品拉取用户积分信息
        $data['point'] = null;
        if ($productDetail['type'] && $productDetail['type'] == Product_package_model::PRODUCT_TYPE_POINT) {
            $result = $api->get_token();
            $result['data'] = isset($result['data']) ? $result['data'] : array();
            $api->set_token($result['data']);
            $point = $api->point_info($this->openid);
            $data['point'] = isset($point['data']) ? $point['data'] : 0;
        }

        $this->load->helper('soma/time_calculate');
        $this->load->model('soma/Sales_rule_model');
        $this->load->model('soma/Sales_order_discount_model');
        $this->load->model('soma/Sales_order_model');

        $salesRuleModel = $this->Sales_rule_model;

        //根据rid规则ID参数确定应该默认买多少份
        $data['buy_default'] = 0;
        $fix_rule = $salesRuleModel->find(array('rule_id' => $this->input->get('rid')));
        if ($fix_rule && $fix_rule['lease_cost'] && $productDetail['price_package']) {
            $fix_qty = $fix_rule['lease_cost'] / $productDetail['price_package'];
            if ($fix_qty < 1) {
                $fix_qty = 1;
            } else {
                if ($fix_qty > 1) {
                    $fix_qty = ceil($fix_qty);
                } else {
                    $fix_qty = intval($fix_qty);
                }
            }
            $data['buy_default'] = $fix_qty > 200 ? 200 : $fix_qty;
        }


        $payParams = array('id' => $this->inter_id);
        $btype = $this->input->get('btype');
        if (!empty($btype)) {
            $payParams['btype'] = $btype;
        }
        $data['btype'] = $btype;

        //加载产品规格信息
        $data['psp_setting'] = [];
        $psp_sid = $this->input->get('psp_sid', true);
        if ($psp_sid) {
            $this->load->model('soma/Product_specification_setting_model', 'psp_model');
            $psp_setting = $this->psp_model->get_specification_compose($this->inter_id, $productId, $psp_sid);
            if (!empty($psp_setting)) {
                $setting_val = array_values($psp_setting);
                $data['psp_setting'] = $setting_val;
                //替换原产品价格信息
                $productDetail['price_package'] = $setting_val[0]['specprice'];
            }
        }


        //判断是否使用价格配置的价格，如果使用的话就不能使用优惠券了
        $scope_product_link = ScopeDiscountService::getInstance()->useScopeDiscount($this->inter_id, $this->openid, $productDetail, $psp_sid);
        $data['scope_product_link'] = $scope_product_link;
        if (!empty($scope_product_link)) {
            $productDetail['price_package'] = $scope_product_link['price'];
        }

        //邮寄
        $defaultAddress = array();
        if (isset($productDetail['can_mail']) && $productDetail['can_mail'] == Product_package_model::CAN_T) {
            $userAddressList = ExpressService::getInstance()->getUserAddressList($this->openid, $this->inter_id, 100);
            if (!empty($userAddressList)) {
                $defaultAddress = $userAddressList[0];
            }

            $userAddress = json_encode($userAddressList);
        } else {
            $userAddress = "null";
        }


        $data['pay_params'] = $payParams;
        $data['user_reduce'] = array('type' => $salesRuleModel::RULE_TYPE_POINT, 'total_amount' => 1, 'usable_amount' => 1);
        $data['package'] = $productDetail;
        $data['address'] = $userAddress;
        $data['default_address'] = $defaultAddress;
        $data['show_balance_passwd'] = Soma_base::STATUS_FALSE;

        $data['show_balance_passwd'] = Soma_base::STATUS_FALSE;
        $balance_inter_ids = array('a457946152', 'a471258436', 'a450089706');
        if (in_array($this->inter_id, $balance_inter_ids)) {
            $data['show_balance_passwd'] = Soma_base::STATUS_TRUE;
        }

        //分销信息
        $data['saler'] = ['self' => $this->input->get('saler'), 'fans' => $this->input->get('fans_saler')];

        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $data);
    }


    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/rule",
     *     summary="用于下单时，根据配置表、用户、购物清单得出目前可以享受的优惠信息",
     *     description="返回当前商品使用的优惠规则，包括种类、价格、是否能使用优惠券等",
     *     operationId="get_rule",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="公众号id",
     *         in="query",
     *         name="id",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="商品id",
     *         in="query",
     *         name="pid",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="购买数量",
     *         in="query",
     *         name="qty",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="结算类型，目前只传 'default' 即可",
     *         in="query",
     *         name="stl",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="多规格商品组合id，用于替换原来产品中的库存与价格",
     *         in="query",
     *         name="sid",
     *         required=false,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="用户openid",
     *         in="query",
     *         name="openid",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Response(
     *         response="200",
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="activity",
     *                  type="object",
     *                  description="立减活动" ,
     *                  @SWG\Items(
     *                        type="object",
     *                        @SWG\Property(
     *                            property="status",
     *                            type="integer" ,
     *                            enum={1, 2},
     *                            description="是否为立减活动（1：是，2：否）" ,
     *                        ),
     *                        @SWG\Property(
     *                            property="auto_rule",
     *                            type="array" ,
     *                            description="立减活动规则" ,
     *                            @SWG\Items(
     *                                 @SWG\Property(
     *                                    property="rule_type",
     *                                    type="integer" ,
     *                                    description="类型" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="name",
     *                                    type="string" ,
     *                                    description="名称" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="reduce_cost",
     *                                    type="float" ,
     *                                    description="抵扣金额" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="least_cost",
     *                                    type="float" ,
     *                                    description="使用下限" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="can_use_coupon",
     *                                    type="integer" ,
     *                                    enum={1, 2},
     *                                    description="限制使用优惠券（1：可用 2：不可用）" ,
     *                                 ),
     *                            )
     *                        )
     *                      ),
     *                  ),
     *                  @SWG\Property(
     *                      property="asset",
     *                      type="object",
     *                      description="积分储值" ,
     *                      @SWG\Items(
     *                          type="object",
     *                          @SWG\Property(
     *                              property="status",
     *                              type="integer" ,
     *                              enum={1, 2},
     *                              description="积分储值（1：是，2：否）" ,
     *                          ),
     *                          @SWG\Property(
     *                              property="cal_rule",
     *                              type="array" ,
     *                              description="积分储值规则" ,
     *                              @SWG\Items(
     *                                 @SWG\Property(
     *                                    property="rule_type",
     *                                    type="integer" ,
     *                                    description="类型" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="quote",
     *                                    type="string" ,
     *                                    description="使用额度" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="reduce_cost",
     *                                    type="float" ,
     *                                    description="抵扣金额" ,
     *                                 ),
     *                                 @SWG\Property(
     *                                    property="can_use_coupon",
     *                                    type="float" ,
     *                                    description="使用下限" ,
     *                                 ),
     *                            )
     *                        )
     *                      ),
     *                  ),
     *              ),
     *     )
     * )
     */
    public function get_rule()
    {

        $data = [];

        if (!$this->openid || !$this->inter_id) {
            $this->out_put_msg(BaseConst::OPER_STATUS_FAIL_TOAST, '获取OPENID失败');
        }
        try {
            $settlement = $this->input->get('stl');
            $pid = $this->input->get('pid');
            $pqty = $this->input->get('qty');

            $this->load->model('soma/Product_package_model');
            $this->load->model('soma/Sales_rule_model');

            $pids = array($pid);
            $products = $this->Product_package_model->get_product_package_by_ids($pids, $this->inter_id);
            $subtotal = 0;

            ScopeDiscountService::getInstance()->appendScopeDiscount($products, $this->inter_id, $this->openid);
            $p_type = Product_package_model::PRODUCT_TYPE_DEFAULT;

            //多规格，替换原来产品中的库存与价格
            $psp_sid = $this->input->get('sid', true);
            $this->load->model('soma/Product_specification_setting_model', 'psp_model');
            if (!empty($products) && $psp_setting = $this->psp_model->load($psp_sid)) {
                $products[0]['price_package'] = $psp_setting->m_get('spec_price');
            }

            foreach ($products as $k => $v) {
                $p_type = $v['type'];
                $products[$k]['qty'] = $pqty;
                $subtotal += $v['price_package'] * $pqty;
            }

            $rules = $this->Sales_rule_model->get_discount_rule($this->inter_id, $this->openid, $products, $subtotal, $settlement);

            if (isset($rules['auto_rule'])) {
                $activity = array('status' => Soma_base::STATUS_TRUE, 'auto_rule' => $rules['auto_rule'],);
            } else {
                $activity = array('status' => Soma_base::STATUS_FALSE, 'auto_rule' => array(),);
            }

            if (isset($rules['cal_rule'])) {
                $asset = array('status' => Soma_base::STATUS_TRUE, 'cal_rule' => $rules['cal_rule'],);
            } else {
                $asset = array('status' => Soma_base::STATUS_FALSE, 'cal_rule' => array(),);

            }

            $data = array('activity' => $activity, 'asset' => $asset, 'base_info' => $rules['base_info']);

            //积分商品不使用任何规则
            if ($p_type == Product_package_model::PRODUCT_TYPE_POINT) {
                $data = [];
            }

            if (isset($products[0]['scopes'])) {
                $data = ['asset' => ['status' => Soma_base::STATUS_FALSE, 'cal_rule' => ['can_use_coupon' => Soma_base::STATUS_FALSE]]];
            }

        } catch (Exception $e) {
            $this->out_put_msg(BaseConst::OPER_STATUS_FAIL_TOAST, $e->getMessage());
        }

        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $data);
    }


    /**
     * @SWG\Get(
     *     tags={"package"},
     *     path="/package/coupons",
     *     summary="用于下单时，获取使用券",
     *     description="使用券目前分三种，抵扣券、兑换券、折扣券",
     *     operationId="get_coupons",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         description="公众号id",
     *         in="query",
     *         name="id",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="商品id",
     *         in="query",
     *         name="pid",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="购买数量",
     *         in="query",
     *         name="qty",
     *         required=true,
     *         type="integer",
     *     ),
     *     @SWG\Parameter(
     *         description="券类型。抵扣券：1，兑换券：3，折扣券：2",
     *         in="query",
     *         name="card_type",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         description="用户openid",
     *         in="query",
     *         name="openid",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Response(
     *         response="200",
     *         description="successful operation",
     *         @SWG\Schema(
     *              type="object",
     *              @SWG\Property(
     *                  property="data",
     *                  type="array",
     *                  description="优惠券列表" ,
     *                  @SWG\Items(ref="#definitions/SomaSalesCouponProduct"),
     *              ),
     *         )
     *     )
     * )
     */
    public function get_coupons()
    {

        $data = [];

        $postArr = $this->input->get();
        $cardType = $postArr['card_type'] + 0;
        $count = $postArr['count'];
        $pid = $postArr['pid'];

        $this->load->model('soma/Product_package_model');
        $products = $this->Product_package_model->get_product_package_by_ids([$pid], $this->inter_id);
        $subtotal = 0;
        if (!empty($products)) {
            foreach ($products as $k => $v) {
                $subtotal += $v['price_package'] * $count;  //累计订单总额
            }
        } else {
            $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, $this->lang->line('no_coupon_available'), $data);
        }

        //读取购买人的可用券
        $this->load->library('Soma/Api_member');
        $api = new Api_member($this->inter_id);
        $result = $api->get_token();
        $api->set_token($result['data']);
        $result = $api->conpon_sign_list($this->openid);

        $card_ids = array();
        if (isset($result['data']) && count($result['data']) > 0) {
            $coupons = array();
            foreach ($result['data'] as $v) {
                if (!in_array($v->card_id, $card_ids)) {
                    $card_ids[] = $v->card_id;
                }
            }
            $this->load->model('soma/Sales_order_discount_model');
            $discountModel = $this->Sales_order_discount_model;
            $this->load->model('soma/Sales_coupon_model');
            $link_all = $this->Sales_coupon_model->get_coupon_product_list($card_ids, $this->inter_id);

            //取出适用所有商品的优惠券，格式：array('card_id'=>'券1',)
            $wide_scope_coupon = $this->Sales_coupon_model->get_wide_scope_coupon($this->inter_id, true);

            foreach ($result['data'] as $k => $v) {
                //逐张优惠券判断是否满足购物条件
                $tmp = (array)$v;

                if (array_key_exists($tmp['card_id'], $wide_scope_coupon)) {
                    if (isset($tmp['least_cost']) && $tmp['least_cost'] > $subtotal) {
                        $tmp['usable'] = false;

                    } else {
                        if (isset($tmp['over_limit']) && $tmp['over_limit'] > 0 && $tmp['over_limit'] < $subtotal) {
                            $tmp['usable'] = false;

                        } else {
                            $tmp['usable'] = true;  //该卡属于宽泛匹配卡id
                        }
                    }
                    $tmp['scopeType'] = $this->lang->line('all_goods_apply');

                } else {
                    foreach ($link_all as $sk => $sv) {
                        //匹配配置表中的各个配置商品，匹配到为止
                        if (isset($tmp['usable']) && $tmp['usable'] == true) {
                            continue;  //匹配到之后跳出不再循环匹配。
                        }

                        //已经配置了该卡券 && 配置的商品、数量 跟当前购物清单匹配
                        if (isset($tmp['least_cost']) && $tmp['least_cost'] > $subtotal) {
                            $tmp['usable'] = false;

                        } else {
                            if (isset($tmp['over_limit']) && $tmp['over_limit'] > 0 && $tmp['over_limit'] < $subtotal) {
                                $tmp['usable'] = false;

                            } else {
                                if ($sv['card_id'] == $tmp['card_id'] && in_array($sv['product_id'], [$pid]) && $count >= $sv['qty']) {
                                    $tmp['usable'] = true;  //该卡满足配置和数量条件
                                    $tmp['scopeType'] = $this->lang->line('some_goods_apple');

                                } else {
                                    $tmp['usable'] = false;  //该卡不符合使用条件
                                    $tmp['scopeType'] = $this->lang->line('no_goods_can_apply');
                                }
                            }
                        }
                    }
                }

                //判断是否到了可用时间
                if (time() < $tmp['use_time_start']) {
                    $tmp['usable'] = false;  //该卡不符合使用条件,没有到使用时间
                }


                //跟会员组了解过, 券的过期时间设置是 2016-11-11 00:00:00，但是实际过期时间是2016-11-11 23:59:59
                $expire_date = date('Y-m-d', $tmp['expire_time']);
                $expire_time = strtotime($expire_date);
                if ($tmp['expire_time'] == $expire_time) {
                    $real_expire_date = $expire_date . ' 23:59:59';
                    $tmp['expire_time'] = strtotime($real_expire_date);
                }

                $minusTime = $tmp['expire_time'] - time();
                if ($minusTime <= 0) {
                    continue;
                } elseif (($minusTime / 86400) <= 10) {
                    $tmp['expire_time'] = str_replace('[0]', ceil($minusTime / 86400), $this->lang->line('expire_after_some_days'));
                } else {
                    $tmp['expire_time'] = $this->lang->line('expire_at_') . '：' . date("Y-m-d", $tmp['expire_time']);
                }

                $coupons[] = $tmp;
            }

            //将不可用的券排到最后面
            $can_use_arr = array();
            foreach ($coupons as $k => $v) {
                if (isset($v['usable']) && $v['usable'] == true) {
                    $can_use_arr[] = $v;
                    unset($coupons[$k]);
                }
            }
            foreach ($can_use_arr as $k => $v) {
                array_unshift($coupons, $v);
            }

            //把优惠券分成抵扣券、兑换券、折扣券
            $dj = array();
            $zk = array();
            $dh = array();
            $cz = array();
            foreach ($coupons as $k => $v) {
                if ($v['card_type'] == $discountModel::TYPE_COUPON_DJ) {
                    //代金券
                    $dj[] = $v;
                } elseif ($v['card_type'] == $discountModel::TYPE_COUPON_ZK) {
                    //折扣券
                    $zk[] = $v;
                } elseif ($v['card_type'] == $discountModel::TYPE_COUPON_DH) {
                    //兑换券
                    $dh[] = $v;
                } elseif ($v['card_type'] == $discountModel::TYPE_COUPON_CZ) {
                    //储值券
                    $cz[] = $v;
                }
            }

            if ($cardType == $discountModel::TYPE_COUPON_DJ) {
                //代金券
                $coupons = $dj;
            } elseif ($cardType == $discountModel::TYPE_COUPON_ZK) {
                //折扣券
                $coupons = $zk;
            } elseif ($cardType == $discountModel::TYPE_COUPON_DH) {
                //兑换券
                $coupons = $dh;
            } elseif ($cardType == $discountModel::TYPE_COUPON_CZ) {
                //储值券
                $coupons = $cz;
            }

            $data = $coupons;
        }

        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $data);
    }

    //todo liguanglong 邮寄地址： api、文档未整理
}