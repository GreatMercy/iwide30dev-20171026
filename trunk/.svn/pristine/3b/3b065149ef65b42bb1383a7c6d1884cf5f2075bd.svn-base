<?php

namespace App\services\soma\order;

use App\services\Result;
use App\services\soma\contract\OrderContract;
use Soma_base;

/**
 * Class NormalOrder
 * @package App\services\soma\order
 * @author renshuai  <renshuai@mofly.cn>
 * 
 */
class NormalAbstractOrder extends AbstractOrder implements OrderContract
{

    /**
     * @param $productID
     * @param $interID
     * @param $qty
     * @param $settingID
     * @param $actID
     * @param $instanceID
     * @param $openid
     * @return Result
     * @author renshuai  <renshuai@jperation.cn>
     */
    public function beforeCreate($productID, $interID, $qty, $settingID, $actID, $instanceID, $openid)
    {
        $result = parent::beforeCreate($productID, $interID, $qty, $settingID, $actID, $instanceID, $openid);
        if ($result->getStatus() === Result::STATUS_FAIL) {
            return $result;
        }

        $result->setStatus(Result::STATUS_FAIL);

        /**
         * @var \Product_package_model $productPackageModel
         */
        $productPackageModel = $this->getCI()->productPackageModel;
        $product = $result->getData();

        if ($settingID > 0) {
            $this->getCI()->load->model('soma/Product_specification_setting_model', 'productSpecificationSettingModel');

            $pspSetting = $this->getCI()->productSpecificationSettingModel->get('setting_id', $settingID);
            if (empty($pspSetting)) {
                $result->setMessage('规格错误');
                return $result;
            }
            $pspSetting = $pspSetting[0];
            $product['price_package'] = $pspSetting['spec_price'];
            $product['stock'] = $pspSetting['spec_stock'];
            $product['setting_id'] = $pspSetting['setting_id'];

            //组装多规格商品名
            $specType = $pspSetting['type'];
            $compose = json_decode($pspSetting['setting_spec_compose'], true);
            $setting_compose = current($compose);

            if( $specType == $productPackageModel::SPEC_TYPE_SCOPE ) {

                $this->getCI()->load->model('soma/Product_specification_model', 'productSpecificationModel');
                $spec_list = $this->getCI()->productSpecificationModel->get_spec_list($interID, $productID, $specType);
                $spec_list_info = json_decode($spec_list[$specType]['spec_compose'], true);

                $spec_type_name = (isset($spec_list_info['spec_type']) && is_array($spec_list_info['spec_type']) ) ? $spec_list_info['spec_type'] : array();

                $product_spec_name = array();
                foreach ($spec_type_name as $key => $type_name) {
                    $product_spec_name[] = $type_name . ':' . $setting_compose['spec_name'][$key];
                }

                $product['name'] .= "(" . implode(';', $product_spec_name) . ")";
            } elseif( $specType == $productPackageModel::SPEC_TYPE_TICKET ) {
                $product['setting_date']     = Soma_base::STATUS_TRUE;//这里是新加的字段，如果是时间规格的，那么过期时间就是规格时间
                $product['expiration_date']  = date('Y-m-d 23:59:59', strtotime( $setting_compose['date'] ) );
                $product['name'] .= "(" . $setting_compose['spec_name'][0]. ")";
            }

        }

        $result->setStatus(Result::STATUS_OK);
        $result->setData($product);

        return $result;
    }

    /**
     * @param \Sales_order_model $salesOrderModel
     * @return Result
     * @author renshuai  <renshuai@mofly.cn>
     */
    public function create($salesOrderModel)
    {
        $result = new Result(Result::STATUS_FAIL);

        $salesOrderModel = $salesOrderModel->order_save($salesOrderModel->business, $salesOrderModel->inter_id);

        if (empty($salesOrderModel->order_id)) {
            $result->setStatus(Result::STATUS_FAIL);
            $result->setMessage('下单失败，请稍后重新尝试');
            return $result;
        }

        $result->setStatus(Result::STATUS_OK);
        $result->setData($salesOrderModel);

        return $result;
    }
}