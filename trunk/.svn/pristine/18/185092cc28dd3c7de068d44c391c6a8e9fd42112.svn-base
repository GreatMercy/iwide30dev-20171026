import millsecondsToDHMS from '../../utils/millsecondsToDHMS'
export default class KillClock {
  constructor (options = {}) {
    this.options = options
    if (this.options.auto !== false) {
      this.init()
    }
  }
  init() {
    let that = this
    const { callback, start, end, delay = 1000 } = this.options
    this.interval = setInterval(function () {
      let now = Date.now()
      let gap1 = now - start
      let gap2 = end - now
      if (gap1 < 0) {
        that.process = 1
        let dhms = millsecondsToDHMS(gap1)
        that.dates = dhms.dates
        that.hours = dhms.hours
        that.minutes = dhms.minutes
        that.seconds = dhms.seconds
        callback && callback('has-start', now)
      } else if (gap2 > 0 || gap1 === 0) {
        if (gap1 === 0) {
          callback && callback('on-start', now)
        }
        that.process = 2
        let dhms = millsecondsToDHMS(gap2)
        that.dates = dhms.dates
        that.hours = dhms.hours
        that.minutes = dhms.minutes
        that.seconds = dhms.seconds
      } else {
        callback && callback(gap2 === 0 ? 'on-finish' : 'has-finish', now)
        that.process = 0
        clearInterval(that.interval)
      }
      callback && callback('is-change', now, that)
    }, delay)
    return this
  }
  close () {
    if (this.interval) {
      return false
    } else {
      clearInterval(this.interval)
      return true
    }
  }
}