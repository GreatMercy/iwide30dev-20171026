<?php
use App\libraries\Iapi\FrontConst;
use App\services\Result;
use App\services\soma\OrderService;


/**
 * Class Order
 * @author renshuai  <renshuai@mofly.cn>
 *
 *
 * @property Sales_order_model $salesOrderModel
 */
class Order extends MY_Front_Soma_Iapi
{

    /**
     * @var array
     */
    public $wft_pay_inter_ids = [
        'a479457264',//厦门海旅温德姆至尊酒店
        'a482210445',//厦门帝元维多利亚大酒店
        'a489326393',//都江堰紫坪铺滑翔伞飞行营地
        'a494820079',//成都群光君悦酒店
        'a496652649',//株洲万豪
        'a497580480',// 苏州吴宫泛太平洋酒店
        'a499046681',
        'a492763532',
        'a498545803',
        'a484533415',
        'a498095405',
    ];


    /**
     * @SWG\Get(
     *     path="/order/index",
     *     summary="订单列表",
     *     tags={"order"},
     *     @SWG\Response(
     *         response=200,
     *         description="订单列表",
     *         @SWG\Schema(ref="#/definitions/SomaSalesOrderModel"),
     *     )
     * )
     */
    public function get_index()
    {
        $this->out_put_msg(1, '', [1]);
    }


    /**
     * @SWG\Post(
     *     path="/order/index",
     *     summary="下单",
     *     tags={"order"},
     *     @SWG\Parameter(
     *         in="formData",
     *         name="business",
     *         required=true,
     *         type="string",
     *     ),
     *     @SWG\Parameter(
     *         in="formData",
     *         name="settlement",
     *         required=true,
     *         type="string",
     *         default="default"
     *     ),
     *     @SWG\Response(
     *         response=200,
     *         description="订单列表",
     *         @SWG\Schema(ref="#/definitions/SomaSalesOrderModel"),
     *     )
     * )
     */
    public function post_index()
    {
        $posts = $this->input->post();

        if (ENVIRONMENT == 'dev') {
            $posts = array(
                'business' => 'package',
                'settlement' => 'default',
                'hotel_id' => 3,
                'qty' => array(
                    '11866' => 1
                ),
                'product_id' => 11866,
                'name' => '123',
                'phone' => 323,
                'saler' => 0,
                'fans_saler' => 0,
                'inid' => 0,
                'mcid' => 2657169,
            );
        }

        $createResult = OrderService::getInstance()->create($posts);
        if ($createResult->getStatus() === Result::STATUS_FAIL) {
            $message = $createResult->getMessage();
            $this->out_put_msg(FrontConst::OPER_STATUS_FAIL_ALERT, $message);
            return;
        }

        $data = $createResult->getData();
        $salesOrderModel = $data['salesOrderModel'];
        $payChannel = $data['payChannel'];

        $this->load->model('soma/sales_order_model', 'salesOrderModel');
        $order = $this->salesOrderModel->load($data['salesOrderModel']->order_id);

        $grand_total = $order->m_get('grand_total');
        if( $grand_total < 0.005){
            $pay_res['paid_type'] = empty($salesOrderModel->payment_extra)? Sales_payment_model::PAY_TYPE_HD : $salesOrderModel->payment_extra;
            $payResult = $this->_inner_payment($order, $pay_res, false);
            $this->out_put_msg(FrontConst::OPER_STATUS_SUCCESS, '', $payResult);
            return;
        }

        // 储值支付
        if($payChannel === 'balance_pay') {

            $bpay_passwd = $posts['bpay_passwd'];
            $pay_res = $this->balance_pay($salesOrderModel->inter_id, $salesOrderModel->openid, $bpay_passwd, $salesOrderModel->order_id);

            if($pay_res && $pay_res['status'] == Soma_base::STATUS_TRUE) {
                $pay_res['paid_type'] = Sales_payment_model::PAY_TYPE_CZ;
                $payResult = $this->_inner_payment($order, $pay_res);
                $this->out_put_msg(FrontConst::OPER_STATUS_SUCCESS, '', $payResult);
                return;
            } else {
                $message = $pay_res['message'];
                $this->out_put_msg(FrontConst::OPER_STATUS_FAIL_ALERT, $message);
                return;
            }

        }elseif($payChannel === 'point_pay') {
            $pay_res = $this->point_pay($order);
            if($pay_res && $pay_res['status'] == Soma_base::STATUS_TRUE) {
                $pay_res['paid_type'] = Sales_payment_model::PAY_TYPE_JF;
                $payResult = $this->_inner_payment($order, $pay_res);
                $this->out_put_msg(FrontConst::OPER_STATUS_SUCCESS, '', $payResult);
                return;
            } else {
                $message = $pay_res['message'];
                $this->out_put_msg(FrontConst::OPER_STATUS_FAIL_ALERT, $message);
                return;
            }
        }

        $result['status'] = Soma_base::STATUS_TRUE;
        $result['data'] = [
            'orderId' => $salesOrderModel->order_id
        ];
        $this->out_put_msg(FrontConst::OPER_STATUS_SUCCESS, '', $result);
        return ;
    }

    /**
     * @param Sales_order_model $order
     * @param $payment
     * @param bool $save_flag
     * @return mixed
     * @author renshuai  <renshuai@jperation.cn>
     */
    protected function _inner_payment($order, $payment, $save_flag = true) {

        $result['status'] = Soma_base::STATUS_FALSE;
        $result['message']  = '订单支付失败';
        $result['step'] = 'fail';

        $log_data= array();
        $log_data['paid_ip'] = $this->input->ip_address();
        $log_data['paid_type'] = $payment['paid_type'];
        $log_data['order_id'] = $order->m_get('order_id');
        $log_data['openid'] = $order->m_get('openid');
        $log_data['business'] = $order->m_get('business');
        $log_data['settlement'] = $order->m_get('settlement');
        $log_data['inter_id'] = $order->m_get('inter_id');
        $log_data['hotel_id'] = $order->m_get('hotel_id');
        $log_data['grand_total'] = $order->m_get('grand_total');
        $log_data['transaction_id'] = isset($payment['trans_id']) ? $payment['trans_id'] : '';

        $order->order_payment($log_data );
        $order->order_payment_post($log_data );

        if($save_flag) {
            $this->load->model('soma/Sales_payment_model', 'pay_model');
            $this->pay_model->save_payment($log_data);
        }

        $result['status'] = Soma_base::STATUS_TRUE;
        $result['message']  = '订单支付成功';
        $result['data'] = array( 'orderId' => $order->m_get('order_id') );
        $result['step'] = 'success';

        $url_params = array(
            'id' => $order->m_get('inter_id'),
            'order_id' => $order->m_get('order_id')
        );

        $url = Soma_const_url::inst()->get_payment_package_success($url_params);
        $result['success_url'] = $url;

        $bType = $this->input->get('bType', true);
        $result['bType'] = $bType;
        // 月饼说分流
        if($bType) {
            $url = Soma_const_url::inst()->get_payment_package_success(array('id'=>$this->inter_id, 'order_id' => $order->m_get('inter_id')));
            $order_detail = $order->m_data();
            $result['success_url'] = $order->success_payment_path($this->inter_id, $bType, $order_detail, $url);
        }

        return $result;
    }

}