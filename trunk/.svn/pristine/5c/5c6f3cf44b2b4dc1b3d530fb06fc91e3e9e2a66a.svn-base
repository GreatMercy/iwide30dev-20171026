import axios from 'axios'
import { LOGIN_URL, INTER_ID } from '../config/env'

// 开发环境跨域请求带cookie
if (process.env.NODE_ENV === 'development') {
  axios.defaults.withCredentials = true
}
// 默认一分钟超时
axios.defaults.timeout = 60000
axios.interceptors.request.use(function (config) {
  console.log(config)
  return config
}, function (err) {
  return Promise.reject(err)
})
// resolve error
axios.interceptors.response.use(function (response) {
  return response
}, function (error) {
  return Promise.resolve(error.response)
})
const checkStatus = function (response) {
  if (response.status === 200 || response.status === 304) {
    return response.data
  }
  return {
    code: -404,
    status: response.status,
    error: response.statusText,
    rejectError: response.method === 'get' ? response.params.__REJECT_ERROR__ : response.data.__REJECT_ERROR__ || false,
    url: response.config.url
  }
}
const checkCode = function (res) {
  // 错误处理
  if (res.code === -404) {
    return handleErrorStatus(res)
  } else {
    return res
  }
}

const handleErrorStatus = function (res) {
  if (!res.rejectError) {
    if (res.status === 401) {
      let curURL = encodeURIComponent(location.href)
      location.replace(`${LOGIN_URL}${curURL}`)
      return
    }
    if (res.status > 401) {
      let message = ''
      switch (res.status) {
        case 403:
          message = process.env.NODE_ENV === 'development' ? `当前用户无权限请求接口${res.url}` : '请联系管理员开通相关权限'
          break
        case 404:
          message = process.env.NODE_ENV === 'development' ? `接口${res.url}未找到` : '请联系管理员确认是否存在相关页面'
          break
        case 500:
          message = process.env.NODE_ENV === 'development' ? `服务器发生内部错误` : '请刷新页面后重试'
          break
      }
      // todo 弹框处理错误
      console.log(message)
    }
  }
  return Promise.reject(res)
}

const INTERIDREG = /(|&|\?)inter_id=([^&]+)?/
export default {
  post (url, data, config) {
    if (process.env.NODE_ENV === 'development') {
      if (config && config.headers && config.headers['Content-Type'] === 'application/x-www-form-urlencoded') {
        if (!INTERIDREG.test(data)) {
          data += '&inter_id=' + INTER_ID
        }
      } else if (data.inter_id === undefined) {
        data.inter_id = INTER_ID
      }
    }
    let _config = Object.assign({}, {data: data, url: url, method: 'post'}, config)
    return axios(_config).then(checkStatus).then(checkCode)
  },
  get (url, data, config) {
    if (process.env.NODE_ENV === 'development') {
      data = data || {}
      if (data.inter_id === undefined) {
        data.inter_id = INTER_ID
      }
    }
    let _config = Object.assign({}, {params: data, method: 'get', url: url}, config)
    return axios(_config).then(checkStatus).then(checkCode)
  },
  put (url, data, config) {
    if (process.env.NODE_ENV === 'development' && !data.inter_id) {
      if (config && config.headers && config.headers['Content-Type'] === 'application/x-www-form-urlencoded') {
        if (!INTERIDREG.test(data)) {
          data += '&inter_id=' + INTER_ID
        }
      } else if (data.inter_id === undefined) {
        data.inter_id = INTER_ID
      }
    }
    let _config = Object.assign({}, {data: data, url: url, method: 'put'}, config)
    return axios(_config).then(checkStatus).then(checkCode)
  },
  delete (url, data, config) {
    if (process.env.NODE_ENV === 'development' && data.inter_id === undefined) {
      data.inter_id = INTER_ID
    }
    let _config = Object.assign({}, {data: data, url: url, method: 'post'}, config)
    return axios(_config).then(checkStatus).then(checkCode)
  }
}
