<?php
if (! defined ( 'BASEPATH' ))
	exit ( 'No direct script access allowed' );
class Auth extends MY_Front_Iapi
{
	public $common_data;
	public $openid;
	public $module;
	public $default_skin='default';
    const TOKEN_KEY = 'JFK！@#7s8ash52hs5h3s3login';
    const INTER_ID = 'a429262688';
	public function __construct()
    {
		parent::__construct ();
		$this->common_data ['csrf_token'] = $this->security->get_csrf_token_name ();
		$this->common_data ['csrf_value'] = $this->security->get_csrf_hash ();
        $this->load->helper('appointment');//加载所需函数
        header('content-type:application/json;charset=utf-8');//定义文本输出返回格式
	}

    /**
     * 绑定微信账号 接口
     */
    public function bindAccount()
    {
        $param = request();
        $token = !empty($param['token']) ? addslashes($param['token']) : '';
        if (empty($token))
        {
            $this->out_put_msg(2,'参数错误');
        }

        //获取token
        $this->load->model('authority/valify_tokens_model');
        $where = array(
            'openid' => $this->openid,
            'status' => 1,
            'type'   => 2,
            'token'  => $token,
        );
        $token = $this->valify_tokens_model->getOne('*', $where);
        if (empty($token))
        {
            $this->out_put_msg(2,'非法操作');
        }

        //判断二维码时效性
        if ($token['expire_time'] < time())
        {
            $this->out_put_msg(2,'绑定时间已过期，请重新扫码绑定');
        }

        //获取账户信息
        $this->load->model('authority/authority_accounts_model');
        $account = $this->authority_accounts_model->getOne('admin_id,bind_status',array('admin_id' => $token['admin_id']));
        if (empty($account))
        {
            $this->out_put_msg(2,'绑定失败，绑定账号不存在');
        }
        else if($account['bind_status'] == 1)
        {
            $this->out_put_msg(2,'绑定失败,账号已被绑定');
        }

        //绑定微信
        $update = array(
            'openid'        => $this->openid,
            'wx_nickname'   => !empty($this->user['nickname']) ? $this->user['nickname'] : '',
            'head_pic'      => !empty($this->user['headimgurl']) ? $this->user['headimgurl'] : '',
            'bind_status'   => 1,
            'update_time'   => date('Y-m-d H:i:s'),
        );

        $whereUpdate = array(
            'admin_id'      => $account['admin_id'],
            'bind_status'   => 0,
        );
        $resRow = $this->authority_accounts_model->saveAccount($whereUpdate,$update);
        if ($resRow > 0)
        {
            $this->out_put_msg(1,'绑定成功');
        }

        $this->out_put_msg(2,'绑定失败,账号已被绑定');
    }

    /**
     * 生成登录二维码 接口
     */
    public function qrCode()
    {
        $this->load->model('authority/valify_tokens_model');
        $add = array(
            'type' => 1,
            'create_time' => date('Y-m-d H:i:s'),
            'expire_time' => time() + 300,//5分钟失效
        );

        $add['token'] = MD5(getMillisecond() . self::TOKEN_KEY);
        $row = $this->valify_tokens_model->addToken($add);
        //创建成功
        if ($row > 0)
        {
            $host = $this->config->config['authority_show_url'];//获取配置前台URL
            $host = empty($host) ? 'http://zb.jinfangka.cn/' : $host;

            $text = $host . 'index.php/authority/auth/login?id='.self::INTER_ID.'&token='.$add['token'];
            $ajaxData = array(
                'imgUrl' => site_url('/authority/auth/showQr?url=').urlencode($text),
                'expire_time' => $add['expire_time'],
            );
            $this->out_put_msg(1,'成功',$ajaxData);
        }
        else
        {
            $this->out_put_msg(2,'生成二维码失败');
        }
    }

    /**
     * 获取微信号下的绑定账户 接口
     */
    public function getAccount()
    {
        $param = request();
        $token = !empty($param['token']) ? addslashes($param['token']) : '';
        if (empty($token))
        {
            $this->out_put_msg(2,'参数错误');
        }
        $this->load->model('authority/authority_accounts_model');

        $account = $this->authority_accounts_model->getAccounts('admin_id,username,head_pic',  array('bind_status' => 1,'openid' => $this->openid));
        $ajaxData = array(
            'list' => $account,
        );
        $this->out_put_msg(1,'成功',$ajaxData);
    }

    /**
     * 获取二维码扫码 状态
     */
    public function checkCodeStatus()
    {
        $param = request();
        $token = !empty($param['token']) ? addslashes($param['token']) : '';
        if (empty($token))
        {
            $this->out_put_msg(2,'参数错误');
        }

        //获取token
        $this->load->model('authority/valify_tokens_model');
        $where = array(
            'token'  => $token,
            'type'   => 1,
            'status' => 1,
        );
        $token = $this->valify_tokens_model->getOne('*', $where);
        if (!empty($token))
        {
            $ajaxData = array();
            $this->out_put_msg('scan_success','扫码成功！',$ajaxData);
        }


    }
}