import * as apiConfig from './api'
import ajax from '@/utils/http'

/**
 * 获取商品首页信息
 * @param  {Object} data    请求参数
 * @param  {Number} [data.page] 页数
 * @param  {Number} [data.page_size=20] 每一页的个数
 * @param  {Number} [data.show_ads_cat=2] 是否显示广告与分类 1显示 2不显示
 * @param  {Number} [data.fcid] 分类ID
 * @param  {Object} [config]  axios配置
 * @param  {String} [version='v1'] API版本
 * @return {Object}         首页信息
 */
const getPackageLists = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_LISTS || apiConfig.v1.GET_PACKAGE_LISTS
  return ajax.get(url, data, config)
}
/**
 * 获取商品详情
 * @param  {Object} data    请求参数
 * @param  {String} data.pid 商品id
 * @param  {Object} [config]  axios配置
 * @param  {String} [version='v1'] api版本
 * @return {Object}         返回商品详情
 */
const getPackageInfo = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_INFO || apiConfig.v1.GET_PACKAGE_INFO
  return ajax.get(url, data, config)
}
/**
 * 获取推荐商品
 * @param  {Object} data    请求参数
 * @param  {Number} [data.page] 第几页
 * @param  {Number} [data.page_size] 每页有多少
 * @param  {Object} [config]  axios配置
 * @param  {String} [version='v1'] api版本
 * @return {Object}         返回推荐商品
 */
const getPackageRecommendation = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_RECOMMENDATION || apiConfig.v1.GET_PACKAGE_RECOMMENDATION
  return ajax.get(url, data, config)
}
/**
 * 获取商品规格
 * @param  {Object} data    请求参数
 * @param  {String} data.pid 商品ID
 * @param  {Object} config  axios配置
 * @param  {String} [version='v1'] api版本
 * @return {Object}         返回商品规格
 */
const getPackageSpec = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_SPEC || apiConfig.v1.GET_PACKAGE_SPEC
  return ajax.get(url, data, config)
}
/**
 * 获取商品时间规格
 * @param  {Object} data    请求参数
 * @param  {String} data.pid 商品ID
 * @param  {String} data.bsn 业务类型
 * @param  {Object} config  axios配置
 * @param  {String} [version='v1'] api版本
 * @return {Object}         返回时间规格
 */
const getPackageTickTime = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_TICK_TIME || apiConfig.v1.GET_PACKAGE_TICK_TIME
  return ajax.get(url, data, config)
}
/**
 * 获取使用券
 * @param {Object} data 请求参数
 * @param {Number} data.pid 商品ID
 * @param {Number} data.qty 商品数量
 * @param {String} data.card_type 券类型 1抵扣券 2折扣券 3兑换券
 * @param {Object} [config] axios配置
 * @param {String} [version='v1'] api版本
 */
const getPackageCoupons = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_COUPONS || apiConfig.v1.GET_PACKAGE_COUPONS
  return ajax.get(url, data, config)
}
/**
 * 获取商品使用的优惠规则
 * @param {Object} data 请求参数
 * @param {Number} data.pid 商品ID
 * @param {Number} data.qty 商品数量
 * @param {String} data.stl 结算类型
 * @param {String} [data.psp_sid] 多规格组合ID
 * @param {Object} [config] axios配置
 * @param {String} [version='v1'] api版本
 */
const getPackageRule = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_RULE || apiConfig.v1.GET_PACKAGE_RULE
  return ajax.get(url, data, config)
}
/**
 * 订阅秒杀提醒
 * @param  {Object} data    请求参数
 * @param  {Number} data.act_id 秒杀ID
 * @param  {Object} [config]  axios配置
 * @param  {String} [version='v1'] api版本
 */
const postKillsecNotice = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].POST_KILLSEC_NOTICE || apiConfig.v1.POST_KILLSEC_NOTICE
  return ajax.post(url, data, config)
}
/**
 * 获取秒杀库存数量
 * @param  {Object} data    请求参数
 * @param  {Number} data.act_id 秒杀ID
 * @param  {Object} [config]  axios配置
 * @param  {String} [version='v1'] api版本
 */
const getKillsecStock = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_KILLSEC_STOCK || apiConfig.v1.GET_KILLSEC_STOCK
  return ajax.get(url, data, config)
}
/**
 * 获取秒杀资格
 * @param  {Object} data    请求参数
 * @param  {Number} data.act_id 秒杀ID
 * @param  {Number} data.inid 秒杀实例ID
 * @param  {Object} [config]  axios配置
 * @param  {String} [version='v1'] api版本
 */
const getKillsecRob = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_KILLSEC_ROB || apiConfig.v1.GET_KILLSEC_ROB
  return ajax.get(url, data, config)
}
/**
 * 获取赠内容
 * @param data 请求参数
 * @param  {Object} [config]  axios配置
 * @param {Number} data.aiid 资产ID
 * @param {Number} data.group 是否是群发，1是，2不是
 * @param {String} data.id 公众号ID
 * @param {String} data.bsn 业务类型
 * @param {Number} data.send_from 1表示来自礼物
 * @param {Number} data.send_order_id 订单ID
 * @param {String} [version='v1'] api版本
 */
const getPresentsPackage = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PRESENTS_PACKAGE || apiConfig.v1.GET_PRESENTS_PACKAGE
  return ajax.get(url, data, config)
}
/**
 * 确定赠送礼物
 * @param data 请求参数
 * @param {String} [version='v1'] api版本
 * @param {String} data.id 公众号ID
 * @param {String} data.msg 祝福语
 * @param {Number} data.tid 主题id
 * @param {Number} data.count_give 收礼人数
 * @param {Number} data.per_give 发出礼盒数，每人多少盒
 * @param {Number} data.is_group 是否是群发,1私人对私人 2群发礼物
 * @param {Number} data.send_from 1表示来自礼物
 * @param {Number} data.send_order_id 礼物源的订单号
 */
const postPresentsSendOut = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].POST_PRESENTS_SEND_OUT || apiConfig.v1.POST_PRESENTS_SEND_OUT
  return ajax.post(url, data, config)
}
/**
 * 获取已经失效的礼物信息
 * @param data 请求参数
 * @param {Object} [config]  axios配置
 * @param {String} [version='v1'] api版本
 * @param {String} data.gid 礼物订单ID
 */
const getPresentsInvalidGiftOrder = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PRESENTS_INVALID_GIFT_ORDER || apiConfig.v1.GET_PRESENTS_INVALID_GIFT_ORDER
  return ajax.get(url, data, config)
}
/**
 * 获取礼物列表
 * @param data 请求参数
 * @param  {Object} [config]  axios配置
 * @param {String} [version='v1'] api版本
 * @param {String} data.id 公众号ID
 * @param {String} data.gid 对应赠送礼物id
 */
const getPresentsReceivedList = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PRESENTS_RECEIVED_LIST || apiConfig.v1.GET_PRESENTS_RECEIVED_LIST
  return ajax.get(url, data, config)
}
/**
 * 获取回退礼物详情的超链接
 * @param data 请求参数
 * @param  {Object} [config]  axios配置
 * @param {String} [version='v1'] api版本
 * @param {String} data.gid 赠送礼物的id
 */
const postPresentsReturnJump = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].POST_PRESENTS_GIFT_RETURN_JUMP || apiConfig.v1.POST_PRESENTS_GIFT_RETURN_JUMP
  return ajax.post(url, data, config)
}
/**
 * 请求可以领取的订单详情
 * @param data 请求参数
 * @param {Object} [config]  axios配置
 * @param {String} [version='v1'] api版本
 * @param {String} data.gid 礼物id
 * @param {String} data.sign token
 */
const getPresentsValidateGiftOrder = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PRESENTS_VALIDATE_GIFT_ORDER || apiConfig.v1.GET_PRESENTS_VALIDATE_GIFT_ORDER
  return ajax.get(url, data, config)
}
/**
 * 请求可以领取的订单详情
 * @param data 请求参数
 * @param {Object} [config]  axios配置
 * @param {String} [version='v1'] api版本
 * @param {String} data.gid 礼物id
 * @param {String} data.sign token
 */
const postPresentsReceiveProcess = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].POST_PRESENTS_RECEIVE_PROCESS || apiConfig.v1.POST_PRESENTS_RECEIVE_PROCESS
  return ajax.post(url, data, config)
}
/**
 * 获取购买成功页二维码&链接
 * @param data 请求参数
 * @param {String} [version='v1'] api版本
 * @param {String} data.id 公众号inter_id
 * @param {String} data.gid 礼物赠送订单id
 * @param {String} data.sign 礼物领取的秘钥参数
 * @param {String} data.bsn 业务类型，不传默认为package
 */
const getSuccessPay = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PACKAGE_SUCCESS_PAY || apiConfig.v1.GET_PACKAGE_SUCCESS_PAY
  return ajax.get(url, data, config)
}
/**
 * 获取购买成功页二维码&链接
 * @param data 请求参数
 * @param {String} [version='v1'] api版本
 * @param {String} data.gid 赠送礼物的id
 */
const getSendSuccess = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PRESENTS_SEND_SUCCESS || apiConfig.v1.GET_PRESENTS_SEND_SUCCESS
  return ajax.get(url, data, config)
}
/**
 * 获取下单准备数据
 * @param data 请求参数
 * @param {Number} data.pid 商品ID
 * @param {String} data.btype 业务类型
 * @param {Number} [data.psp_id] 商品多规格Id
 * @param {String} [data.token] 秒杀活动必传参数
 * @param {String} [version='v1'] api版本
 */
const getOrderPay = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_ORDER_PAY || apiConfig.v1.GET_ORDER_PAY
  return ajax.get(url, data, config)
}
/**
 * 获取订单详情页数据
 * @param data 请求参数
 * @param {String} data.oid 订单ID
 * @param {String} [version='v1'] api版本
 */
const getOrderDetail = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_ORDER_DETAIL || apiConfig.v1.GET_ORDER_DETAIL
  return ajax.get(url, data, config)
}
/**
 * 获取订单中心订单列表
 * @param data 请求参数
 * @param {Number} data.page 请求页码
 * @param {Number} data.page_size 每页行数
 * @param {Number} data.type  菜单类型 1 全部 2 未使用 3 已完成
 */
const getOrderList = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_ORDER_LIST || apiConfig.v1.GET_ORDER_LIST
  return ajax.get(url, data, config)
}
/**
 * 获取订单中心礼物列表
 * @param data 请求参数
 * @param {String} data.id inter_id 公众号ID
 */
const getPresentsMineList = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PRESENTS_MINE_LIST || apiConfig.v1.GET_PRESENTS_MINE_LIST
  return ajax.get(url, data, config)
}
/**
 * 删除订单
 * @param {Number} oid 订单ID
 */
const deleteOrder = (oid, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].DELETE_ORDER || apiConfig.v1.DELETE_ORDER
  let requestUrl = `${url}?oid=${oid}`
  return ajax.delete(requestUrl, {}, config)
}
/**
 * 保存地址
 * @param data 请求参数
 * @param {String} [data.adress_id]  地址ID
 * @param {String} data.province 省ID
 * @param {String} data.city 市ID
 * @param {String} [data.region] 区ID
 * @param {String} data.address 详细地址
 * @param {String} data.contact 联系人
 * @param {String} data.phone 收件人电话
 * @param {Object} [config]  axios配置
 * @param {String} [version='v1'] api版本
 */
const postExpressSave = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].POST_EXPRESS_SAVE || apiConfig.v1.POST_EXPRESS_SAVE
  return ajax.post(url, data, config)
}
/**
 * 获取地址数据
 * @param {Object} data 请求参数
 * @param {Object} [config] axios配置
 * @param {String} [version=v1] api版本
 */
const getExpressTree = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_EXPRESS_TREE || apiConfig.v1.GET_EXPRESS_TREE
  return ajax.get(url, data, config)
}
/**
 * 请求客房预定信息
 * @param data 请求参数
 * @param {Number} data.aiid 资产细单ID
 * @param {Number} data.code_id 卷码ID
 */
const getOrderPackageBooking = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_ORDER_PACKAGE_BOOKING || apiConfig.v1.GET_ORDER_PACKAGE_BOOKING
  return ajax.get(url, data, config)
}
/**
 * 请求到店用卷信息
 * @param data 请求参数
 * @param {Number} data.aiid 资产细单ID
 * @param {Number} data.code_id 卷码ID
 */
const getOrderPackageUsage = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_ORDER_PACKAGE_USAGE || apiConfig.v1.GET_ORDER_PACKAGE_USAGE
  return ajax.get(url, data, config)
}
/**
 * 下单
 * @param {Object} data 请求参数
 * @param {String} data.business 业务类型
 * @param {String} data.settlement 结算类型
 * @param {Number} data.hotel_id 酒店ID
 * @param {Number} data.product_id 商品ID
 * @param {String} data.qty 商品数量
 * @param {String} data.name 客户姓名
 * @param {Number} data.act_id 活动ID 秒杀/拼团购买传活动ID
 * @param {Number} data.inid 秒杀活动实例ID，秒杀购买传实例ID，普通/拼团传空
 * @param {String} data.token 秒杀活动下单资格token
 * @param {Number} data.grid 拼团活动ID
 * @param {String} data.type 拼团活动类型 add 表示开团 join表示参团
 * @param {String} data.mcid 优惠券批量使用
 * @param {Number} data.quote_type 优惠类型 30积分 40储值 51满减 52打折
 * @param {Number} data.quote 优惠金额
 * @param {String} data.password 积分储值优惠使用密码
 * @param {String} data.bpay_password 积分储值作为支付方式时的密码
 * @param {String} data.u_type 特权券商品的使用方式 1送自己 2送朋友 -1无使用方式
 * @param {String} data.psp_setting 多规格商品设置信息
 * @param {String} data.scope_product_link_id 专属价id，该项判断是否使用价格配置的价格，如果使用的话就不能使用优惠券了
 * @param {Number} data.address_id 邮寄前置地址ID
 * @param {Object} [config] axios配置
 * @param {String} [version='v1'] api版本
 */
const postOrderCreate = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].POST_ORDER_CEATE || apiConfig.v1.POST_ORDER_CREATE
  return ajax.post(url, data, config)
}
/**
 * 删除礼订单
 * @param data 请求参数
 * @param {String} data.gid 礼物的ID
 */
const deletePresentsGiftOrder = (gid, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].DELETE_PRESENTS_GIFT_ORDER || apiConfig.v1.DELETE_PRESENTS_GIFT_ORDER
  let requestUrl = `${url}?gid=${gid}`
  return ajax.delete(requestUrl, {}, config)
}
/**
 * 收取礼物订单详情页
 * @param {Number} data.gid 礼物的ID
 * @param {string} data.bsn 业务类型
 */
const getReceivedGiftDetail = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_PRESENTS_RECEIVED_GIFT_DETAIL || apiConfig.v1.GET_PRESENTS_RECEIVED_GIFT_DETAIL
  return ajax.get(url, data, config)
}
/**
 * 申请退款页面
 * @param {Number} data.oid 订单ID
 */
const getRefund = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_REFUND || apiConfig.v1.GET_REFUND
  return ajax.get(url, data, config)
}
/**
 * 提交退款
 * @param {Number} data.oid 订单ID
 * @param {String} data.cause 退款原因
 * @param {Number} data.rtype 退款类型
 */
const postRefundApply = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].POST_REFUND_APPLY || apiConfig.v1.POST_REFUND_APPLY
  return ajax.post(url, data, config)
}
/**
 * 申请退款页面
 * @param {Number} data.oid 订单ID
 */
const getRefundDetail = (data, config, version = 'v1') => {
  let url = apiConfig[version] && apiConfig[version].GET_REFUND_DETAIL || apiConfig.v1.GET_REFUND_DETAIL
  return ajax.get(url, data, config)
}

export {
  getPackageLists,
  getPackageInfo,
  getPackageRecommendation,
  getPackageSpec,
  getPackageTickTime,
  getPackageCoupons,
  getPackageRule,
  postKillsecNotice,
  postOrderCreate,
  getKillsecStock,
  getKillsecRob,
  getPresentsPackage,
  postPresentsSendOut,
  postPresentsReturnJump,
  getPresentsReceivedList,
  getPresentsValidateGiftOrder,
  getPresentsInvalidGiftOrder,
  postPresentsReceiveProcess,
  getSuccessPay,
  getSendSuccess,
  getOrderPay,
  getOrderDetail,
  getOrderList,
  getPresentsMineList,
  deleteOrder,
  postExpressSave,
  getExpressTree,
  getOrderPackageBooking,
  getOrderPackageUsage,
  deletePresentsGiftOrder,
  getReceivedGiftDetail,
  getRefund,
  postRefundApply,
  getRefundDetail
}
