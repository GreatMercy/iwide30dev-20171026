<?php
use App\libraries\Iapi\BaseConst;
use App\services\soma\ScopeDiscountService;
use App\services\soma\PaginateService;
use App\libraries\Support\Log;

/**
 * Class Index
 * @author renshuai  <renshuai@mofly.cn>
 *
 */
class Index extends MY_Front_Soma_Iapi
{
    public function __construct()
    {
        parent::__construct();
        $this->load->library('Soma_base');
    }

    /**
     * @SWG\Get(
     *     path="index/test",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *         name="tags",
     *         in="query",
     *         description="Tags to filter by",
     *         required=true,
     *         type="array",
     *         @SWG\Items(type="string"),
     *         collectionFormat="multi"
     *     ),
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(ref="#/definitions/ApiResponse"),
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid tag value",
     *     ),
     * )[ ] /iwide3_0/models/soma/Sales_order_idx_model.php

     */
    public function get_test()
    {
        $arr['csrf_token'] = $this->security->get_csrf_token_name ();
        $arr['csrf_value'] = $this->security->get_csrf_hash ();
        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $arr);
    }

    /**
     * @SWG\Get(
     *   path="index/test2",
     *   produces={"application/json"},
     *   @SWG\Response(
     *     response=200,
     *     description="successful operation",
     *     @SWG\Schema(
     *       type="object",
     *       @SWG\Property(
     *          title="id",
     *          property="id",
     *          type="integer",
     *          format="int32",
     *       ),
     *       @SWG\Property(
     *          property="name",
     *          type="string"
     *       )
     *     )
     *   )
     * )
     */
    public function post_test2()
    {
        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', ['id' => $this->inter_id]);
    }

    /**
     * @SWG\Get(path="index/test3",
     *   produces={"application/json"},
     *   @SWG\Response(
     *     response=200,
     *     description="successful operation",
     *     @SWG\Schema(
     *       type="array",
     *       @SWG\Items(
     *          type="object",
     *          additionalProperties={
     *              "property":"age",
     *              "type":"integer",
     *              "format":"int32"
     *          }
     *       )
     *     )
     *   )
     * )
     */
    public function get_test3()
    {
        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', ['id' => $this->input->get('openid')]);
    }


    /**
     * 新版皮肤
     * @author daikanwu <daikanwu@jperation.com>
     */
    public function get_index()
    {
        $page_data = [];
        
        //advs
        $this->load->model('soma/Adv_model', 'ads_model');

        //首页广告图 cate:0
        $page_data['advs'] = $this->ads_model->get_ads_by_category($this->inter_id);

        //分类
        $filter_cat = $this->input->get('fcid');
        $this->load->model('soma/Category_package_model', 'categoryModel');
        $page_data['categories'] = $this->categoryModel->get_package_category_list($this->inter_id, null, 5, $filter_cat);

        //商品
        $this->load->model('soma/Product_package_model', 'productModel');
        $productModel = $this->productModel;

        $page_size = $this->input->get('page_size');
        $page = $this->input->get('page');
        if (empty($page_size)) $page_size = 20;
        if (empty($page)) $page = 1;

        $param = array(
            'inter_id' => $this->inter_id,
            'is_hide' => $productModel::STATUS_CAN_YES,
            'status' => $productModel::STATUS_ACTIVE,
            'page' => $page,
            'page_size' => $page_size
        );
        $products = $productModel->getProductsList($param);
        $productIds = array_column($products['data'], 'product_id');

        $result = $pointProductIds =array();
        //积分商品
        foreach ($products['data'] as $p) {
            if ($p['type'] == $productModel::PRODUCT_TYPE_POINT) $pointProductIds[] = $p['product_id'];
            $result[$p['product_id']] = $p;
        }

        //拼团列表
        $this->load->model('soma/Activity_groupon_model', 'activityGrouponModel');
        $groupons = $this->activityGrouponModel->groupon_list_by_productIds($productIds, $this->inter_id);
        foreach ($groupons as $groupon) {
            if (in_array($groupon['product_id'], $pointProductIds)) {
                $groupon['group_price'] = ceil($groupon['group_price']);
            }
            $result[$groupon['product_id']]['groupon'] = $groupon;

        }

//      秒杀列表
        $this->load->model('soma/Activity_killsec_model', 'activityKillsecModel');
        $killsecs = $this->activityKillsecModel->killsec_list_by_productIds($productIds, $this->inter_id);

        foreach ($killsecs as $killsec) {
            if (in_array($killsec['product_id'], $pointProductIds)) {
                $killsec['killsec_price'] = ceil($killsec['killsec_price']);
            }
            /** 对秒杀开始时间进行处理 */
            $killsec['killsec_time'] = date('Y-m-d H:i:s', strtotime($killsec['killsec_time']) - Activity_killsec_model::PRESTART_TIME);
            $result[$killsec['product_id']]['killsec'] = $killsec;
        }

        //满减活动
        $this->load->model('soma/Sales_rule_model', 'salesRuleModel');
        $rules = $this->salesRuleModel->get_product_rule($productIds, $this->inter_id);
        if ($rules) {
            foreach ($rules as $rule) {
                if ($rule['scope'] == Soma_base::STATUS_TRUE) {
                    //全部适用
                    // 非满减规则过滤
                    $not_auto_rule_arr = array(Sales_rule_model::RULE_TYPE_POINT, Sales_rule_model::RULE_TYPE_BALENCE);
                    if (!in_array($rule['rule_type'], $not_auto_rule_arr)) {
                        foreach ($productIds as $v) {
                            if (!isset($result[$v]['auto_rule'])) {
                                $result[$v]['auto_rule'] = $rule;
                            }
                        }
                    }
                } else {
                    foreach ($rule['product_id'] as $rule_pid) {
                        $result[$rule_pid]['auto_rule'] = $rule;
                    }
                }
            }
        }

        // 商品多规格,多规格商品显示最低的规格价格
        $this->load->model('soma/Product_specification_setting_model', 'psp_model');

        if ($productIds) {
            $psp_setting = $this->psp_model->get_inter_product_spec_setting($this->inter_id, $productIds);
            Log::debug('psp',$psp_setting);
            if (!empty($psp_setting)) {
                $settingList = $this->_get_setting_info($psp_setting);

                $psp_setting = $settingList['settingInfo'];
                foreach ($psp_setting as $pid => $setting) {
                    $result[$pid]['psp_setting'] = $setting;
                    $result[$pid]['price_package'] = $setting[0]['spec_price'];
                }
            }
        }

        $page_data['products'] = array_values($result);

        //给商品追加价格配置的东西
        ScopeDiscountService::getInstance()->appendScopeDiscount($page_data['products'], $this->current_inter_id, $this->openid);

        $ext['page'] = $products['page_num'];
        $ext['size'] = $products['page_size'];
        $ext['count'] = $products['total'];
        $page_data['page_resource'] = $ext;

        $this->out_put_msg(BaseConst::OPER_STATUS_SUCCESS, '', $page_data);

    }

    /**
     * 月饼说皮肤配置
     */
    public function page_basic_config($pageTitle = NULL)
    {
        $title = '';
        $themeConfig = $this->themeConfig;

        $public_info = $this->Publics_model->get_public_by_id($this->inter_id);
        $_prefix = isset($public_info['name']) ? $public_info['name'] . '-' : '';

        if ( ! empty($themeConfig))
        {
            if (isset($themeConfig['theme_title']) && ! empty($themeConfig['theme_title']) && empty($pageTitle))
            {
                if (defined('PROJECT_AREA') && PROJECT_AREA == 'mooncake')
                {
                    $title = $_prefix . '月饼说 - ' . $themeConfig['theme_title'];
                } else
                {
                    $title = $this->lang->line('title') .' - ' . $themeConfig['theme_title'];
                }
            }
            if (empty($header))
            {
                if (defined('PROJECT_AREA') && PROJECT_AREA == 'mooncake')
                {
                    $title = $pageTitle ? $pageTitle : $_prefix . '月饼说';
                } else
                {
                    $title = $pageTitle ? $pageTitle : $this->lang->line('title');
                }
            }
            $header['title'] = $title; //$pageTitle;
            if (isset($themeConfig['main_color']) && ! empty($themeConfig['main_color']))
                $header['main_color'] = $themeConfig['main_color'];
            if (isset($themeConfig['sub_color']) && ! empty($themeConfig['sub_color']))
                $header['sub_color'] = $themeConfig['sub_color'];
        }
        return $header;
    }

    /**
     * 处理规格信息
     * @param $psp_setting
     * @return array
     * @author luguihong  <luguihong@mofly.cn>
     */
    protected function _get_setting_info($psp_setting)
    {
        $dataTicket = $data = array();
        //判断是否有门票类的
        $isTicket = false;
        foreach ($psp_setting as $row) {
            if ($row['type'] == Soma_base::STATUS_TRUE) {
                $data[$row['product_id']][] = $row;
            } elseif ($row['type'] == Soma_base::STATUS_FALSE) {
                $isTicket = true;
                $dataTicket[$row['product_id']][] = $row;
            }
        }

        if ($isTicket && $dataTicket) {
            $psp_setting = $dataTicket;
        } else {
            $psp_setting = $data;
        }

        $ticketId = '';
        if ($this->session->userdata('tkid')) {
            $ticketId = $this->session->userdata('tkid');
        }

        if (!$ticketId || $ticketId <= 0) {
            //如果获取不到门店的内容
            //$isTicket = FALSE;
            //$psp_setting = $data;
        }

        return array(
            'isTicket'    => $isTicket,
            'settingInfo' => $psp_setting,
        );
    }


    public function get_default_sharing()
    {
        if (defined('PROJECT_AREA') && PROJECT_AREA == 'mooncake')
        {
            $share_img = base_url('public/soma/images/sharing_mooncake.png');
            $default_title = '月饼说，送您一份中秋好礼物';
            $default_desc = '微信送礼更有趣';
        } else
        {
            $share_img = base_url('public/soma/images/sharing_package.png');
            // $default_title = '发现一家好去处，快点开看看';
            // $default_desc = '优惠不等人';
            // 根据运行环境进行双语翻译
            $default_title = $this->lang->line('default_share_title');
            $default_desc = $this->lang->line('default_share_desc');
        }

        $default_share_config = array(
            'share_img' => $share_img,
            'default_title' => $default_title,
            'default_desc' => $default_desc,
        );
        return $default_share_config;
    }


    /**
     * 带智能检测用户关注情况，视情况进行高级授权跳转
     */
    public function _get_wx_userinfo()
    {
        $this->load->model('wx/publics_model');
        $fans = $this->publics_model->get_fans_info($this->openid);

//        $this->write_log("_get_wx_userinfo():fans : " . var_export($fans, true));

        if (!$fans || empty($fans['nickname'])) {
            $userinfo = $this->publics_model->get_wxuser_info($this->inter_id, $this->openid);

            $this->write_log("_get_wx_userinfo():userinfo : " . var_export($userinfo, true));

            if (isset($userinfo['subscribe']) && $userinfo['subscribe'] == 0) {
// return array();//BUG未解决先返回空数据

                //微信返回的信息显示没有关注，则进行高级授权验证
                if (isset($_SERVER['SERVER_SOFTWARE']) && $_SERVER['SERVER_SOFTWARE'] == 'nginx') {
                    $refer = 'http://' . $_SERVER ['HTTP_HOST'] . $_SERVER ['REQUEST_URI'];
                } else {
                    $refer = 'http://' . $_SERVER ['SERVER_NAME'] . $_SERVER ['REQUEST_URI'];
                }

                $inter_id = $this->inter_id;
                $url = front_site_url($inter_id, false);
                if (defined('PROJECT_AREA') && PROJECT_AREA == 'mooncake') {
                    // 月饼说跳转过来，如果存在refer这个参数，证明这是第二次跳转，不进行封装
                    $r = $this->input->get('refer');
                    $this->write_log("_get_wx_userinfo(): get_refer : " . $r);
                    if (!$r) {
                        $refer = base64_url_encode($refer);
                    } else {
                        $refer = $r;
                    }
                    $refer = $url . "/index.php/soma/api/mooncake_decode_cb/?refer=" . $refer;
                }

                $refer = urlencode($refer);

                $redirect_url = $url . "/index.php/Public_oauth/index?scope=snsapi_userinfo&id={$inter_id}&refer={$refer}";

                $this->write_log('_get_wx_userinfo($redirect_url) : ' . $redirect_url);

                redirect($redirect_url);

            } else {
                $this->publics_model->update_wxuser_info($this->inter_id, $this->openid);

                return $userinfo;
            }

        } else {
            return $fans;
        }
    }



}