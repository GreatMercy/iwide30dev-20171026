import JfkDate from './date'
import { getWeeksInMonth, getDatesInPrevMonth, getDatesInNextMonth, getDatesInMonth, parseDate, dateKeyFormat, formatDate } from './util'
const weekTitles = ['日', '一', '二', '三', '四', '五', '六']
export default {
  name: 'jfkCalendar',
  render (h) {
    let weekTitleItems
    const { showWeekTitle, showOtherMonthDates, weekTitles, dates, year, month, handleDateClick, prevMonthDisabled, nextMonthDisabled, prevMonth, nextMonth } = this
    if (showWeekTitle) {
      weekTitleItems = <table class="jfk-calendar__weeks font-size--28 font-color-light-silver">
        <thead >
          <tr class="jfk-calendar__cell">
            {
              weekTitles.map((item, index) => {
                return <td key={'week_' + index} class="jfk-calendar__row">{item}</td>
              })
            }
          </tr>
        </thead>
      </table>
    }
    let dateItems = []
    let len = dates.length / 7
    for (let i = 0; i < len; i++) {
      let _dateItems = []
      for (let j = 0; j < 7; j++) {
        let key = i * 7 + j
        let o = dates[key]
        let d
        let className = ['jfk-calendar__row']
        if (showOtherMonthDates || (!showOtherMonthDates && o.current === 0)) {
          d = <jfk-date value={o.date} text={o.text} content={o.content}></jfk-date>
        }
        _dateItems.push(
          <td title={o.key} onClick={handleDateClick(key)} class={{'jfk-calendar__row': true, 'is-today': o.today, 'is-disable': o.disabled, 'is-selected': o.selected, 'is-range': o.range !== undefined, 'is-start': o.range === -1, 'is-end': o.range === 1}} key={o.key}>{d}</td>
        )
      }
      dateItems.push(<tr class="jfk-calendar__cell" key={'row_' + i}>{_dateItems}</tr>)
    }
    return (
      <div class="jfk-calendar">
        <div class="jfk-calendar__tools">
          <a onClick={prevMonth} class={{'is-disabled': prevMonthDisabled, 'is-prev': true, 'switch-month': true}}></a>
          <div class="font-size--32 font-color-white">{year}年{month}月</div>
          <a onClick={nextMonth} class={{'is-disabled': nextMonthDisabled, 'is-next': true, 'switch-month': true}}></a>
        </div>
        <div class="jfk-calendar__body">
          {weekTitleItems}
          <table class="jfk-calendar__dates">
            <tbody>
              {dateItems}
            </tbody>
          </table>
        </div>
      </div>
    )
  },
  data () {
    return {
      year: 0,
      month: 0,
      min: '',
      max: '',
      select: [],
      today: ''
    }
  },
  created () {
    let date = this.defaultValue || this.value && this.value[0] || new Date()
    this.year = date.getFullYear()
    this.month = date.getMonth() + 1
    if (this.minDate) {
      this.min = formatDate(this.minDate, dateKeyFormat)
    }
    if (this.maxDate) {
      this.max = formatDate(this.maxDate, dateKeyFormat)
    }
  },
  computed: {
    dates () {
      this.today = formatDate(new Date(), dateKeyFormat)
      const { year, month, firstDay, weekMode } = this
      let weekNum = this.weekMode && 6 || getWeeksInMonth(year, month, firstDay)
      let datesInPrevMonth = getDatesInPrevMonth(year, month, firstDay)
      let datesInNextMonth = getDatesInNextMonth(year, month, firstDay, weekMode)
      let d = getDatesInMonth(year, month)
      let i = 0
      let y1 = year
      let y3 = year
      let m1 = month
      let m3 = month
      let d1 = d
      let d3 = d
      let dates = []
      if (datesInPrevMonth) {
        if (m1 === 1) {
          --y1
          m1 = 13
        }
        --m1
        d1 = getDatesInMonth(y1, m1)
      }
      if (datesInNextMonth) {
        if (m3 === 12) {
          ++y3
          m3 = 0
        }
        ++m3
      }
      let c2 = 0
      let c3 = 0
      while (i < weekNum) {
        let j = 0
        while (j < 7) {
          let _y = 0
          let _m = 0
          let _d = 0
          let _c = 0
          if (datesInPrevMonth) {
            _y = y1
            _m = m1
            _d = d1 - datesInPrevMonth + 1
            _c = -1
            --datesInPrevMonth
          }
          else if (c2 < d) {
            _y = year
            _m = month
            _d = ++c2
          }
          else if (c3 < datesInNextMonth) {
            _y = y3
            _m = m3
            _d = ++c3
            _c = 1
          }
          let result = parseDate(_y, _m, _d, _c, this)
          dates.push(result)
          j++
        }
        i++
      }
      return dates
    },
    weekTitles () {
      const { firstDay } = this
      return weekTitles.slice(firstDay, 7).concat(weekTitles.slice(0, firstDay))
    },
    prevMonthDisabled () {
      if (this.mis) {
        let firstDate = formatDate({y: this.year, m: this.month, d: 1}, dateKeyFormat)
        return firstDate <= this.mis ? true : false
      }
      return false
    },
    nextMonthDisabled () {
      if (this.max) {
        let lastDate = formatDate({y: this.year, m: this.month, d: getDatesInMonth(this.year, this.month)}, dateKeyFormat)
        return lastDate >= this.max ? true : false
      }
      return false
    }
  },
  watch: {
    value (val) {
      this.select = val.map(function (d) {
        return formatDate(d, dateKeyFormat)
      })
    }
  },
  methods: {
    prevMonth () {
      if (!this.prevMonthDisabled) {
        let month = this.month - 1
        if (month < 1) {
          month = 12
          this.year = this.year - 1
        }
        this.month = month
      }
    },
    nextMonth () {
      let month = this.month + 1
      if (month > 12) {
        month = 1
        this.year = this.year + 1
      }
      this.month = month
    },
    handleDateClick (i) {
      let d = this.dates[i]
      let that = this
      const { disabled, year, month, date } = d
      if (!disabled) {
        let format = formatDate({y: year, m: month, d: date}, this.format)
        return function () {
          that.$emit('date-click', format)
        }
      }
    },
  },
  components: {
    JfkDate
  },
  props: {
    value: {
      type: Array,
      default: function () {
        return []
      }
    },
    defaultValue: Date,
    weekMode: Boolean,
    range: Boolean,
    multiple: Boolean,
    minDate: Date,
    maxDate: Date,
    minRangeGap: Date,
    maxRangeGap: Date,
    switchViewByOtherMonth: Boolean,
    firstDay: {
      type: Number,
      default: 0
    },
    showWeekTitle: {
      type: Boolean,
      default: true
    },
    showOtherMonthDates: Boolean,
    dateCellRender: Function,
    disabledDate: Function,
    dateTextRender: Function,
    format: {
      type: String,
      default: 'yyyy-MM-dd'
    }
  }
}